angular.module('App', [

    'ui.router',

    'ngStorage',
    'ngMaterial',
    'ngSanitize',

    'md.data.table',

    'ngFileUpload',
    //'angular-loading-bar',
    //'angularResizable',
    'ui.utils.masks',
    //'as.sortable',
    //'ngCsv',
    'angular-img-cropper',
    //'indexedDB',
    'enterStroke',
    'textAngular',


    'CRUD',
    'CRUDDialogCtrl',
    'ConfirmDeleteCtrl',
    'ImageEditor_DialogCtrl',
    'BasicDialogCtrl',
    'Filters',

    'appRoutes',
    'appConfig',
    'appFunctions',

    'LoginCtrl',
    'MainCtrl',
    'HomeCtrl',

    'MiTecnicoAmigoCtrl',
    'ArticuloDiagCtrl',
    'SolicitudesDetalleCtrl',

    'UsuariosCtrl',
    'ArticulosCtrl',
    'Articulos_ArticuloEditorCtrl',
    'CasosCtrl', // Luigi
    'Casos_NovedadesCtrl', // Luigi
    'LineasProductivasCtrl', // Luigi
    //'MitecnicoAmigoInicioCtrl', // Luigi
    //Inicio Dev Angélica
    'ContactoCtrl',
    'ArticulomuroEditDialogCtrl',
    'ConfiguracionCtrl',
    'ListaEditDialogCtrl',
    //Fin Dev Angélica

    'OrganizacionesCtrl',
    'OrganizacionDiagCtrl',

    'FincasCtrl',
    'FincaDiagCtrl',
    'TareaDiagCtrl',
    'PerfilesCtrl', // Luigi

    // 'PerfilesCtrl',
    // Zonas Agroambientales
    'ZonasCtrl',
    'Zonas_ZonaEditorCtrl',
    'LaboresCtrl',
    'LaboresDiagCtrl',
    'LotesCtrl',
    'Labores_LaborEditorCtrl',

    'FondoRotatorio_CreditosCtrl', //CAOH
    'FondoRotatorio_NuevoCreditoDiagCtrl', //CAOH
    'CreditoSrv',

]);

angular.module('appConfig', [])
    .config(['$mdThemingProvider', '$mdIconProvider', '$mdDateLocaleProvider',
        function($mdThemingProvider, $mdIconProvider, $mdDateLocaleProvider) {

            $mdThemingProvider.theme('default')
                .primaryPalette('green', { 'default': '700' });

            $mdThemingProvider.theme('Transparent', 'default')
                .primaryPalette('grey', { 'default': '900' })
                .accentPalette('yellow').dark();

            //Icons
            var icons = {
                'md-plus': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-close': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>',
                'md-arrow-back': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></svg>',
                'md-apps': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><g transform="translate(3, 3)"><circle cx="2" cy="2" r="2"></circle><circle cx="2" cy="9" r="2"></circle><circle cx="2" cy="16" r="2"></circle><circle cx="9" cy="2" r="2"></circle><circle cx="9" cy="9" r="2"></circle><circle cx="16" cy="2" r="2"></circle><circle cx="16" cy="9" r="2"></circle><circle cx="16" cy="16" r="2"></circle><circle cx="9" cy="16" r="2"></circle></g></svg>',
                'md-enter': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z"/></svg>',
                'md-save': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/></svg>',
                'md-delete': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-bars': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                'md-more-v': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/></svg>',
                'md-more-h': '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/></svg>',
                'md-search': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-chevron-down': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-check': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>',
                'md-edit': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-settings': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"/></svg>',
                'md-reorder': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z"/></svg>',
                'md-drag-handle': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ><defs><path id="a" d="M0 0h24v24H0V0z"/></defs><clipPath id="b"><use xlink:href="#a" overflow="visible"/></clipPath><path clip-path="url(#b)" d="M20 9H4v2h16V9zM4 15h16v-2H4v2z"/></svg>',
                'md-format-quote': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M7.17 17c.51 0 .98-.29 1.2-.74l1.42-2.84c.14-.28.21-.58.21-.89V8c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2l-1.03 2.06c-.45.89.2 1.94 1.2 1.94zm10 0c.51 0 .98-.29 1.2-.74l1.42-2.84c.14-.28.21-.58.21-.89V8c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2l-1.03 2.06c-.45.89.2 1.94 1.2 1.94z"/></svg>',
                'md-insert-comment': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-3 12H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z"/></svg>',
                'md-calendar': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z"/><path fill="none" d="M0 0h24v24H0z"/></svg>',
                'md-calendar-event': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-time': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/><path d="M0 0h24v24H0z" fill="none"/><path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/></svg>',
                'md-timer': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"/></svg>',
                'md-pawn': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><path stroke="null" id="svg_1" d="m9.651737,9.946874l-1.073613,0a0.684375,0.684375 0 0 0 -0.684375,0.684375l0,1.36875a0.684375,0.684375 0 0 0 0.684375,0.684375l0.684375,0l0,0.234826c0,1.882031 -0.177082,3.70418 -1.026563,5.240174l7.528126,0c-0.850764,-1.535994 -1.026563,-3.358143 -1.026563,-5.240174l0,-0.234826l0.684375,0a0.684375,0.684375 0 0 0 0.684375,-0.684375l0,-1.36875a0.684375,0.684375 0 0 0 -0.684375,-0.684375l-1.073613,0c1.257111,-0.786176 2.100176,-2.172035 2.100176,-3.764063a4.448438,4.448438 0 0 0 -8.896876,0c0,1.592027 0.843065,2.977887 2.100176,3.764063zm8.507637,9.581251l-12.318751,0a0.684375,0.684375 0 0 0 -0.684375,0.684375l0,1.36875a0.684375,0.684375 0 0 0 0.684375,0.684375l12.318751,0a0.684375,0.684375 0 0 0 0.684375,-0.684375l0,-1.36875a0.684375,0.684375 0 0 0 -0.684375,-0.684375z" fill="currentColor"/></g></svg>',
                'md-toggle-on': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M17 7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h10c2.76 0 5-2.24 5-5s-2.24-5-5-5zm0 8c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"/><path fill="none" d="M0 0h24v24H0z"/></svg>',
                'md-money': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'my-entero': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><text style="cursor: move;" font-weight="bold" stroke="#000" transform="matrix(0.8789344025030082,0,0,0.8789344025030082,-0.006719467772585017,1.6922866269988484) " xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="24" id="svg_1" y="20.046582" x="6.90954" stroke-width="0" fill="#757575">#</text></g></svg>',
                'my-decimal': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><text font-weight="bold" stroke="#000" transform="matrix(0.8789344025030082,0,0,0.8789344025030082,-0.006719467772585017,1.6922866269988484) " xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="19" id="svg_1" y="18.308238" x="0.457763" stroke-width="0" fill="#757575">.01</text></g></svg>',
                'md-color': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M24 0H0v24h24z" fill="none"/><path d="M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"/></svg>',
                'md-list': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-list-view': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-refresh': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-trending-up': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-info': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>',
                'md-info-outline': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>',
                'md-description': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"/></svg>',
                'md-north': '<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><rect fill="none" height="24" width="24"/><path d="M5,9l1.41,1.41L11,5.83V22H13V5.83l4.59,4.59L19,9l-7-7L5,9z"/></svg>',
                'md-south': '<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24"><rect fill="none" height="24" width="24"/><path d="M19,15l-1.41-1.41L13,18.17V2H11v16.17l-4.59-4.59L5,15l7,7L19,15z"/></svg>',
            };

            iconp = $mdIconProvider.defaultFontSet('fa');

            angular.forEach(icons, function(icon, k) {
                iconp.icon(k, 'data:image/svg+xml, ' + icon, 24);
            });

        }
    ]);
angular.module('appFunctions', [])
.factory('appFunctions', [ '$rootScope', '$http', '$mdDialog', '$mdSidenav', '$mdToast', '$q', '$state', '$location', '$filter', '$window',
	function($rootScope, $http, $mdDialog, $mdSidenav, $mdToast, $q, $state, $location, $filter, $window){

		var Rs = $rootScope;

		//State
		Rs.stateChanged = function(){
			Rs.State = $state.current;
			Rs.State.route = $location.path().split('/');

			/*if(Rs.State.route.length > 2){
				Rs.State.tabSelected = Rs.Sections[Rs.State.route[2]]['No'];
			};*/

		};
		Rs.navTo = function(Dir, params){ $state.go(Dir, params); };
		Rs.Refresh = function() { $state.go($state.current, $state.params, {reload: true}); };



		//Helpers
		Rs.def = function(arg, def) {
			return (typeof arg == 'undefined' ? def : arg);
		};

		Rs.getSize = function(obj) {
			if(typeof obj !== "undefined" && typeof obj !== "null"){
				return Object.keys(obj).length;
			}
		};

		Rs.inArray = function (item, array) {
			if(!array) return false;
			return (-1 !== array.indexOf(item));
		};

		Rs.getIndex = function(array, keyval, key){
			var key = Rs.def(key, 'id');
			return $filter('getIndex')(array, keyval, key);
		};

		Rs.updateArray = function(array, newelm, key){
			var key = Rs.def(key, 'id');
			var keyval = newelm[key];
			var I = Rs.getIndex(array, keyval, key);
			array[I] = newelm;
		};

		Rs.removeArrayElm = (array, index) => {
			array.splice(index,1);
		};

		Rs.arrayPluck = (array, prop) => {
			return Array.from(new Set(array.map(obj => obj[prop])))
		};

		Rs.http = function(url, data, scp, prop, method){
			var method = Rs.def(method, 'POST');
			var data = Rs.def(data, {});
			var prop = Rs.def(prop, false);

			return $q(function(res, rej) {
				$http({
					method: method,
					url: url,
					data: data
				}).then(function(r){
					if(prop) scp[prop] = r.data;
					res(r.data);
				}, function(r){
					Rs.showToast(r.data.Msg, 'Error');
					rej(r.data);
				});
			});
		};

		Rs.found = function(needle, haysack, key, msg, except){
			var except = Rs.def(except, false);
			var Found = false;

			angular.forEach(haysack, function(elm){
				if(elm[key].toUpperCase().trim() == needle.toUpperCase().trim()){
					if(except){
						if(elm[except[0]] != except[1]) Found = true;
					}else{
						Found = true;
					}
				};
			});
			if(Found){
				var msg = Rs.def(msg, needle+' ya existe.');
				if(msg !== '') Rs.showToast(msg, 'Error');
			}
			return Found;
		};

		Rs.prepFields = function(Fields, Model){
			var Model = Rs.def(Model, {});
			angular.forEach(Fields, function(F, i){
				Model[F['Nombre']] = F['Value'];
			});
			return Model;
		};

		Rs.submitForm = (name) => {
			Rs.$broadcast('makeSubmit', {formName: name});
		};

		Rs.download = function(strData, strFileName, strMimeType) {
			var D = document,
			    a = D.createElement("a");
			    strMimeType= strMimeType || "application/octet-stream";

			if (navigator.msSaveBlob) { // IE10
			    return navigator.msSaveBlob(new Blob([strData], {type: strMimeType}), strFileName);
			};

			if ('download' in a) { //html5 A[download]
			    a.href = "data:" + strMimeType + "," + encodeURIComponent(strData);
			    a.setAttribute("download", strFileName);
			    a.innerHTML = "downloading...";
			    D.body.appendChild(a);
			    setTimeout(function() {
			        a.click();
			        D.body.removeChild(a);
			    }, 66);
			    return true;
			};

			//do iframe dataURL download (old ch+FF):
			var f = D.createElement("iframe");
			D.body.appendChild(f);
			f.src = "data:" +  strMimeType   + "," + encodeURIComponent(strData);

			setTimeout(function() {
			    D.body.removeChild(f);
			}, 333);

			return true;
		};



		//Sidenav
		Rs.toogleSidenav = function(navID){
			$mdSidenav(navID).toggle();
		};



		//Quick Lauch
		Rs.showToast = function(Msg, Type, Delay = 5000, Position){

			var Type = Rs.def(Type, 'Normal');
			var Position = Rs.def(Position, 'bottom left')

			var Templates = {
				Normal: '<md-toast class="md-toast-normal"><span flex>' + Msg + '<span></md-toast>',
				Error:  '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>',
				Success:  '<md-toast class="md-toast-success"><span flex>' + Msg + '<span></md-toast>',
			};
			return $mdToast.show({
				template: Templates[Type],
				hideDelay: Delay,
				position: Position
			});
		};





		//Dialogs
		Rs.CancelDiag = () => {
			$mdDialog.cancel();
		};

		Rs.BasicDialog = function(params) {
			var DefConfig = {
				Theme: 'default',
				Flex: 30,
				Title: 'Crear',
				Fields: [
					{ Nombre: 'Nombre',  Value: '', Required: true }
				],
				Confirm: { Text: 'Crear' },
				HasDelete: false,
				controller: 'BasicDialogCtrl',
				templateUrl: '/templates/dialogs/basic-string.html',
				fullscreen: true,
				clickOutsideToClose: true,
				multiple: true,
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.prepFields = (Fields) => {
			var F = {};
			angular.forEach(Fields, (i) => {
				F[i.Nombre] = i.Value;
			});

			return F;
		};

		Rs.ListSelector = function(List, Config, ev){
			var List = Rs.def(List, null);
			var DefConfig = {
				controller: 'ListSelectorCtrl',
				templateUrl: '/templates/dialogs/ListSelector.html',
				clickOutsideToClose: true,
				hasBackdrop: true,
				fullscreen: false,
				multiple: true,
				parent: null,
				remoteUrl: false,
				remoteMethod: 'POST',
				remoteData: {},
				remoteQuery: false,
				remoteListName: 'Nombre',
				remoteListLogo: false,
				remoteListIconFn: false,
				searchPlaceholder: 'Buscar',
				dialog_class: '',
				element_class: '',
			};
			var Config = angular.extend(DefConfig, Config);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config, List: List },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
				parent: Config.parent
			});
		};
		
		Rs.Confirm = function(params){
			var DefConfig = {
				Theme: 'default',
				Titulo: '¿Seguro que desea realizar esta acción?',
				Detail: '',
				Buttons: [
					{ Text: 'Ok', Class: 'md-raised md-primary', Value: true }
				],
				Icon: false,
				hasCancel: true,
				CancelText: 'Cancelar',
				controller: 'ConfirmCtrl',
				templateUrl: '/templates/dialogs/confirm.html',
				fullscreen: false,
				clickOutsideToClose: true,
				multiple: true
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.confirmDelete = function(params){
			var DefConfig = {
				Theme: 'Danger',
				Title: '¿Eliminar?',
				Detail: 'Esta acción no se puede deshacer',
				ConfirmText: 'Eliminar',
				controller: 'ConfirmDeleteCtrl',
				templateUrl: '/templates/dialogs/confirm-delete.html',
				fullscreen: false,
				clickOutsideToClose: true,
				multiple: true,
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.selectIconDiag = () => {
			return $mdDialog.show({
				controller: 'IconSelectDiagCtrl',
				templateUrl: '/templates/dialogs/icon-selector.html',
				clickOutsideToClose: true,
				multiple: true,
			});
		};

		Rs.getItemsVal = (Items, Comparator, Prop) => {
			var Elm = $filter('filter')(Rs[Items],Comparator)[0];
			//console.log(Items,Comparator,Elm);
			return Elm[Prop];
		};



		Rs.FsGet = (arr, ruta, filename, defaultOpen,modeB,skipOrder) => {

			if(!skipOrder){
				var arr = arr.sort((a, b) => {
					var ar = (a[ruta]+'\\'+a[filename]).toLowerCase();
					var br = (b[ruta]+'\\'+b[filename]).toLowerCase();
					return ar > br ? 1 : -1;
				});
			}
			
			var fs = [];
	    	var routes = [];
	    	var defaultOpen = Rs.def(defaultOpen, false);
	    	var modeB    = Rs.def(modeB, false);

	    	angular.forEach(arr, (e) => {
	    		var r = e[ruta];
    			rex = r.split('\\');
    			for (var i = 0; i < rex.length; i++) {
    				for (var n = 0; n <= i; n++) {
    					
    					var subroute = rex.slice(0,n+1).join('\\');
    					if(subroute != "" && !routes.includes(subroute)){
    						routes.push(subroute);
    						var show = defaultOpen || (n == 0);

    						//if( !modeB || ( modeB && e.children > 0 ) ){
    							fs.push({ i: fs.length, type: 'folder', name: rex[n], depth: n, open: defaultOpen, show: show, route: subroute });
    						//};

    					};
	    				
    				};
    			};
    			var depth = (r == "") ? 0 : (rex.length);
    			var show = defaultOpen || (depth == 0);

    			if( !modeB || (modeB && e.children == 0) ){
    				fs.push({ i: fs.length, type: 'file', depth: depth, show: show, route: subroute, file: e });
    			};
    			
	    	});

	    	//console.log(fs);

	    	return fs;
		};

		Rs.FsOpenFolder = (arr,folder) => {
			folder.open = !folder.open;
			var cont = true;
			angular.forEach(arr, e => {
				if(cont){
					if(e.i > folder.i){
						if(e.depth == folder.depth + 1) e.show = folder.open;
						if(e.depth >  folder.depth + 1) e.show = false;
						if(e.type == 'folder' && e.depth >= folder.depth + 1) e.open = false;
						if(e.type == 'folder' && e.depth == folder.depth) cont = false;
					};
				};
			});
		};

		Rs.FsCalcRoute = (route, newfolder) => {
			//newfolder = newfolder.trim().split('\\').join('');
			if(newfolder == "" || (newfolder.toLowerCase() == route.toLowerCase()) ) return route;
			if(route == "") return newfolder;

			return route + "\\" + newfolder;
		};

		Rs.calcTextColor = (base_color) => {
		    var r, g, b, hsp;
		    if(base_color.match(/^rgb/)) {
		        color = base_color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
		        r = color[1]; g = color[2]; b = color[3];
		    }else{
		        color = +("0x" + base_color.slice(1).replace(base_color.length < 5 && /./g, '$&$&'));
		        r = color >> 16;
		        g = color >> 8 & 255;
		        b = color & 255;
		    };
		    
		    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
		    hsp = Math.sqrt( 0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b) );
		    var textColor = (hsp>127.5) ? 'black' : 'white';
		    console.log(base_color, hsp, textColor);
		    return textColor;
		};



		Rs.AnioActual = new Date().getFullYear();
		Rs.MesActual  = parseInt(moment().subtract(5,'d').format('MM'));
		Rs.Meses = [
			['01','Ene','Enero'],
			['02','Feb','Febrero'],
			['03','Mar','Marzo'],
			['04','Abr','Abril'],
			['05','May','Mayo'],
			['06','Jun','Junio'],
			['07','Jul','Julio'],
			['08','Ago','Agosto'],
			['09','Sep','Septiembre'],
			['10','Oct','Octubre'],
			['11','Nov','Noviembre'],
			['12','Dic','Diciembre'],
		];

		Rs.periodDateLocale = {
			formatDate: (date) => {
				if(typeof date == 'undefined' || date === null || isNaN(date.getTime()) ){ return null; }else{
					return moment(date).format('YMM');
				}
			}
		};

		return {};
  }
]);
angular.module('appRoutes', [])
.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', 
	function($stateProvider, $urlRouterProvider, $httpProvider){

		$stateProvider
			.state('Login', {
				url: '/Login',
				templateUrl: '/Login'
			})
			.state('Home', {
				url: '/Home',
				templateUrl: '/Home',
				resolve: {
					promiseObj: ($rootScope, $localStorage, $http) => {
						return $http.post('api/usuario/revisar-token', { token: $localStorage.token });
					},
					controller: ($rootScope, $localStorage, promiseObj) => {
						$rootScope.Usuario = promiseObj.data;
					}
				}
			})
			.state('Home.Seccion', {
				url: '/:seccion',
				templateUrl: (params) => { return '/Home/' + params.seccion; }
			})
			.state('Home.Seccion.Subseccion', {
				url: '/:subseccion',
				templateUrl: (params) => { return '/Home/' + params.seccion + '/' + params.subseccion }
			});

		$urlRouterProvider.otherwise('/Home');

		$httpProvider.interceptors.push(['$q', '$localStorage', 
			function ($q, $localStorage) {
				return {
					request: function (config) {
						config.headers = config.headers || {};
						if ($localStorage.token) {
							config.headers.token = $localStorage.token;
						}
						return config;
					},
					response: function (res) {
						return res || $q.when(res);
					},
					responseError: function(rejection) {

					  if ([400, 401, 412].indexOf(rejection.status) !== -1) {
						location.replace("/#/Login");
					  }

					  return $q.reject(rejection);
					}

				};
			}
		]);
	}
]);
//const { cloneDeep } = require("lodash");

angular.module('Articulos_ArticuloEditorCtrl', [])
    .controller('Articulos_ArticuloEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('Articulos_ArticuloEditorCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            Ctrl.keyWords = [];
            //FIN DEV ANGÉLICA

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Articulo = angular.copy(Articulo);
            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            Ctrl.keyWords = Ctrl.Articulo.palabras_clave.split(",");
            //FIN DEV ANGÉLICA

            //INCIO DEV ANGÉLICA --> Lineas productivas
		    $http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			//console.log(r.data);
		    });
		    //FIN DEV ANGÉLICA

            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/articulos/secciones',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.TiposSeccion = {
                'Parrafo': { Nombre: 'Párrafo', Icono: 'fa-align-justify' },
                'Tabla': { Nombre: 'Tabla', Icono: 'fa-table' },
                'Imagen': { Nombre: 'Imágen', Icono: 'fa-image' }
            };

            Ctrl.getSecciones = () => {
                Ctrl.SeccionesCRUD.setScope('elarticulo', Articulo.id).get();
            };

            Ctrl.getSecciones();

            Ctrl.guardarArticulo = () => {
                //INICIO DEV ANGELICA -- Actualización de palabras clave en chips
                Ctrl.Articulo.palabras_clave = Ctrl.keyWords.join();
                Ctrl.$parent.ArticulosCRUD.update(Ctrl.Articulo).then(() => {
                    var SeccionesCambiadas = Ctrl.SeccionesCRUD.rows.filter(s => s.changed);
                    if (SeccionesCambiadas.length > 0) {
                        Ctrl.SeccionesCRUD.updateMultiple(SeccionesCambiadas).then(() => {
                            console.log('Secciones Actualizadas');
                        });
                    }
                });
            }

            Ctrl.crearSeccion = async(kT) => {

                var ruta = null;
                var contenido = null;
                // Luigi :: Obtener el numero de secciones e incrementar en uno, para el indice.
                var indice = Ctrl.SeccionesCRUD.rows.length + 1;

                if (kT == 'Imagen') {
                    var Img = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600, //Ancho del canvas
                                CanvasHeight: 400, //Alto del canvas
                                CropWidth: 600, //Ancho del recorte que se subirá
                                CropHeight: 400, //Alto del recorte que se subirá
                                MinWidth: 60, //Ancho mínimo del selector
                                MinHeight: 40, //Ancho mínimo del selector
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/articulos_media/' + Articulo.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    if (Img) ruta = Img.Msg;
                }

                if (kT == 'Tabla') {
                    contenido = [
                        ['Uno', 'Dos', 'Tres'],
                        [1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9]
                    ];
                };

                Ctrl.SeccionesCRUD.add({
                    articulo_id: Articulo.id,
                    indice: indice, // Luigi :: Agregar el campo para el registro.
                    tipo: kT,
                    ruta: ruta,
                    contenido: contenido
                });
            }

            Ctrl.eliminarSeccion = (S) => {
                Rs.confirmDelete({
                    Title: '¿Eliminar la Sección?',
                }).then(R => {
                    if (!R) return;
                    Ctrl.SeccionesCRUD.delete(S)
                        .then(() => { // Luigi :: Despues de borrar, se debe reorganizar el indice de cada seccion
                            angular.forEach(Ctrl.SeccionesCRUD.rows, (S, iS) => { // Luigi :: Recorremos las secciones
                                // Luigi :: Comparamos el indice, si es diferente, se actualiza
                                if (S.indice != iS + 1) {
                                    S.indice = iS + 1;
                                    S.changed = true; // Luigi :: Marcamos el registro para el guardado.
                                }
                            });
                            // Luigi :: Enviamos a guardar los datos modificados.
                            Ctrl.guardarArticulo();
                        });
                });
            };

            //Seccion Tabla
            Ctrl.agregarColumna = (S) => {
                var Tabla = S.contenido;
                angular.forEach(Tabla, (Fila) => {
                    Fila.push('');
                });
                S.changed = true;
            }

            Ctrl.eliminarColumna = (S, kC) => {
                var Tabla = angular.copy(S.contenido);
                angular.forEach(Tabla, (Fila) => {
                    Fila.splice(kC, 1);
                });
                S.contenido = Tabla;
                S.changed = true;
            }

            Ctrl.agregarFila = (S) => {
                var Tabla = S.contenido;
                var NuevaFila = angular.copy(Tabla[0]);
                NuevaFila = NuevaFila.map(V => { return null });

                Tabla.push(NuevaFila);
                S.changed = true;
            }

            Ctrl.eliminarFila = (S, kR) => {
                var Tabla = S.contenido;
                Tabla.splice(kR, 1);
                S.changed = true;
            }

            // Luigi :: Funcion para mover el indice, aumentar o decrementar.
            Ctrl.moverSeccion = (S, n) => {
                // Luigi :: declaramos variables para almacenar valores necesarios en el proceso.
                var nuevoIndice = S.indice + n;
                var elementoObjetivo;
                // Luigi :: Ciclo para validar el numero de indice
                for (let i = 0; i < Ctrl.SeccionesCRUD.rows.length; i++) {
                    if (Ctrl.SeccionesCRUD.rows[i].indice == nuevoIndice)
                        elementoObjetivo = Ctrl.SeccionesCRUD.rows[i];
                }
                // Luigi :: Si el elemenoObjetivo no existe, salimos.
                if (!elementoObjetivo)
                    return;

                // Luigi :: Almacenamos el valor del nuevo indice.
                S.indice = nuevoIndice;
                elementoObjetivo.indice = nuevoIndice - n;
                // Luigi :: Guardamos todos los registros modificados.
                S.changed = true;
                elementoObjetivo.changed = true;
            };


        }
    ]);
angular.module('ArticulosCtrl', [])
.controller('ArticulosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('ArticulosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.ArticulosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/articulos/articulos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'autor' ],
			order_by: [ '-created_at' ]
		});

		Ctrl.getArticulos = () => {
			Ctrl.ArticulosCRUD.get().then(() => {
				//Ctrl.editarArticulo(Ctrl.ArticulosCRUD.rows[0]);
			});
		};

		Ctrl.getArticulos();

		Ctrl.nuevoArticulo = () => {

			Ctrl.ArticulosCRUD.dialog({
				usuario_id: Rs.Usuario.id,
				estado: 'Borrador'
			}, {
				title: 'Nuevo Articulo',
				only: ['titulo']
			}).then(r => {
				if(!r) return;
				Ctrl.ArticulosCRUD.add(r);
			});

		};


		Ctrl.editarArticulo = (A) => {
			$mdDialog.show({
				templateUrl: 'Frag/AdministracionGeneral.Articulos_ArticuloEditorDiag',
				controller: 'Articulos_ArticuloEditorCtrl',
				locals: { Articulo: A },
				scope: Ctrl.$new()
			});
		}


	}
]);
angular.module('Casos_CasoEditorCtrl', [])
    .controller('Casos_CasoEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('Casos_CasoEditorCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Caso = angular.copy(Caso);

            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/Novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }
            Ctrl.getCasos();

        }
    ]);
// Inicio del codigo de Luigi
angular.module('Casos_NovedadesCtrl', [])
    .controller('Casos_NovedadesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {

            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                    //console.log(Imagen);
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };

        }
    ]);
// Fin del codigo de Luigi
angular.module("CasosCtrl", []).controller("CasosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("CasosCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        var TiposCasos = [
            "Consulta General",
            "Apoyo Técnico",
            "Contar Experiencia"
        ];

        Ctrl.CasosCRUD = $injector.get("CRUD").config({
            base_url: "/api/casos/casos",
            limit: 1000,
            add_append: "refresh",
            query_with: ["solicitante"],
            order_by: ["-created_at"]
        });
        //Inicio Dev Angélica
        //Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia'[ver archivo Caso.php]
        Ctrl.CasosCRUD.setScope("tipo");
        //Fin Dev Angélica

        Ctrl.UsuariosCRUD = $injector
            .get("CRUD")
            .config({ base_url: "/api/usuario/usuarios" });

        Ctrl.getCasos = () => {
            Promise.all([Ctrl.UsuariosCRUD.get()]).then(() => {
                Ctrl.CasosCRUD.get().then(() => {
                    //Ctrl.novedadesCaso(Ctrl.CasosCRUD.rows[1]);
                });
            });
        };

        Ctrl.getCasos();

        Ctrl.nuevoCaso = () => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: null,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombre"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: TiposCasos[0],
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: "",
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var NuevoCaso = {
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.add(NuevoCaso);
            });
        };

        Ctrl.editarCaso = C => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: C.solicitante_id,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombre"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: C.tipo,
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: C.titulo,
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var CasoEditado = {
                    id: C.id,
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.update(CasoEditado).then(() => {
                    Ctrl.CasosCRUD.get();
                    Rs.showToast("Caso actualizado");
                });
            });
        };

        Ctrl.eliminarCaso = C => {
            Rs.confirmDelete({
                Title: "¿Eliminar el caso #" + C.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.CasosCRUD.delete(C);
            });
        };

        // Inicia codigo Luigi
        Ctrl.novedadesCaso = C => {
            $mdDialog.show({
                templateUrl: "Frag/AdministracionGeneral.Casos_NovedadesDiag",
                controller: "Casos_NovedadesCtrl",
                locals: {
                    Caso: C
                }
            });
        };
        // Finaliza codigo Luigi
    }
]);

//INICIO DEV ANGELICA
angular.module('ConfiguracionCtrl', [])
.controller('ConfiguracionCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('ConfiguracionCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		var autoincrementals = ['Si', 'No'];

		Ctrl.ListaCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/lista/listas',
			limit: 1000,
			add_append: 'refresh',
			order_by: [ '-lista' ]
		});


		Ctrl.getListas = () => {
			Promise.all([
				Ctrl.ListaCRUD.get()
			]).then(() => {
			});
			
		};

		Ctrl.getListas();

		Ctrl.nuevaLista = () => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Crear Nueva Lista',
				Fields: [
					{ Nombre: 'lista',  Value: '', Type: 'textarea', Required: true},
					{ Nombre: 'autoincremental', Value: autoincrementals[0], Type: 'simplelist', List: autoincrementals, Required: true }
				],
				Confirm: { Text: 'Crear Lista' },
			}).then(r => {
				if(!r) return;
				debugger;

				var NuevaLista = {
					lista: r.Fields[0].Value,
					autoincremental: r.Fields[1].Value === 'Si' ? 1:0
				};

				Ctrl.ListaCRUD.add(NuevaLista);
			});

		};

		//INICIO DEV ANGÉLICA 
		//Abre el modal para editar una lista
		Ctrl.editarLista = (O) => {
			$mdDialog.show({
				templateUrl: 'Frag/AdministracionGeneral.ListaEditorDiag',
				controller: 'ListaEditDialogCtrl',
				locals: {Lista: O},
				fullscreen: false,
			}).then(function (resp) {
				//Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', Rs.Usuario.organizacion_id).get();
			}, function (resp) {
				console.log('Error status: ' + resp.status); 
			});

		}

		
		Ctrl.eliminarLista = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar la lista #'+C.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.ListaCRUD.delete(C);
			});
		}
	}
]);
//FIN DEV ANGELICA
//INICIO DEV ANGELICA
angular.module('ContactoCtrl', [])
.controller('ContactoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('ContactoCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		var TiposCasos = ['Whatsapp', 'SMS', 'Llamada telefonica'];

		Ctrl.ContactoCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/casos/casos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'solicitante' ],
			order_by: [ '-created_at' ]
		});

		//Inicio Dev Angélica
		//Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia'[ver archivo Caso.php]
		Ctrl.ContactoCRUD.setScope('tipocontacto');
		//Fin Dev Angélica

		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ base_url: '/api/usuario/usuarios' });


		Ctrl.getCasos = () => {
			Promise.all([
				Ctrl.UsuariosCRUD.get()
			]).then(() => {
				Ctrl.ContactoCRUD.get().then(() => {
					//Ctrl.editarArticulo(Ctrl.CasosCRUD.rows[1]);
				});
			});
			
			
		};

		Ctrl.getCasos();

		Ctrl.nuevoContacto = () => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Crear Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',  Value: null, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso', Value: TiposCasos[0], Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso',       Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Crear Contacto' },
			}).then(r => {
				if(!r) return;

				var NuevoContacto = {
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.add(NuevoContacto);
			});

		};


		Ctrl.editarContacto = (C) => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Editar Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',         Value: C.solicitante_id, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso',     Value: C.tipo, Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso', Value: C.titulo, Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Editar Contacto' },
			}).then(r => {
				if(!r) return;

				var ContactoEditado = {
					id: C.id,
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.update(ContactoEditado).then(() => {
					Ctrl.ContactoCRUD.get();
				});
				
			});

		}

		Ctrl.eliminarContacto = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar el contacto #'+C.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.ContactoCRUD.delete(C);
			});
		}
	}
]);
//FIN DEV ANGELICA
angular.module("FincasCtrl", []).controller("FincasCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("FincasCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        var TiposSuelo = [
             "UNIDAD AMAGÁ",
             "UNIDAD ARMENIA",
             "UNIDAD CASCARERO",
             "UNIDAD CARTAGENITA",
             "UNIDAD CINCHO",
             "UNIDAD CHANCHÓN",
             "UNIDAD CHINCHINÁ",
             "UNIDAD CHUSCAL",
             "UNIDAD DOÑA JUANA",
             "UNIDAD DOSCIENTOS",
             "UNIDAD EL PALMAR",
             "UNIDAD FONDESA",
             "UNIDAD FRESNO",
             "UNIDAD GUADALUPE",
             "UNIDAD LA MONTAÑA",
             "UNIDAD LIBANO",
             "UNIDAD LLANO DE PALMAS",
             "UNIDAD MALABAR",
             "UNIDAD MONTENEGRO",
             "UNIDAD NORTE",
             "UNIDAD PERIJÁ",
             "UNIDAD PAUJIL",
             "UNIDAD PIENDAMÓ",
             "UNIDAD QUINDÍO",
             "UNIDAD ROPERO",
             "UNIDAD SALGAR",
             "UNIDAD SAN SIMÓN",
             "UNIDAD SUÁREZ",
             "UNIDAD SUROESTE",
             "UNIDAD TABLAZO",
             "UNIDAD TIMBÍO",
             "UNIDAD VENECIA",
             "UNIDAD VILLETA",             
        ];

        var TiposCultivo  = [
            "MONOCULTIVO",
            "ASOCIADO",
        ];

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.FincasCRUD = $injector.get("CRUD").config({
            base_url: "/api/fincas/fincas",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getFinca = () => {
            // Ctrl.FincasCRUD.setScope("id", Rs.Usuario.finca_id); //Me trae las fincas del usuario
            Ctrl.FincasCRUD.get().then(() => {
                Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                //Ctrl.editarFinca(Ctrl.FincasCRUD.rows[0]);
            });
        };

        Ctrl.getFinca();

        Ctrl.nuevaFinca = () => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Finca",
                Fields: [
                    {
                        Nombre: "Usuario",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Nombre",
                        Value: "",
                        Type: "string",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Dirección",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Departamento",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Municipio",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Área total",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Total de lotes",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Tipo de cultivo",
                        Value: TiposCultivo[0],
                        Type: "simplelist",
                        List: TiposCultivo,
                        Required: true
                    },
                    
                    {
                        Nombre: "Tipo de Suelo",
                        Value: TiposSuelo[0],
                        Type: "simplelist",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Zona",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Latitud",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Longitud",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Hectareas",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Sitios",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Temperatura (C°):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Humedad Relativa (%):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Precipitacion (Mm):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Minima (Mt):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Maxima (Mt):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Brillo Solar (H):",
                        Value: "",
                        Type: "string",
                        Required: true
                    }
                ],

                Confirm: { Text: "Crear Finca" }
            }).then(r => {
                if (!r) return;
                var nuevaFinca = {
                    usuario_id : r.Fields[0].Value,
                    nombre: r.Fields[1].Value,
                    direccion: r.Fields[2].Value,
                    departamento_id: r.Fields[3].Value,
                    municipio_id: r.Fields[4].Value,
                    area_total: r.Fields[5].Value,
                    total_lotes: r.Fields[6].Value,
                    tipo_cultivo: r.Fields[7].Value,
                    tipo_suelo: r.Fields[8].Value,
                    zona_id : r.Fields[9].Value,
                    latitud: r.Fields[10].Value,
                    longitud: r.Fields[11].Value,
                    hectareas: r.Fields[12].Value,
                    sitios: r.Fields[13].Value,
                    temperatura: r.Fields[14].Value,
                    humedad_relativa: r.Fields[15].Value,
                    precipitacion: r.Fields[16].Value,
                    altimetria_min: r.Fields[17].Value,
                    altimetria_max: r.Fields[18].Value,
                    brillo_solar: r.Fields[19].Value,

                };
                Ctrl.FincasCRUD.add(nuevaFinca);
            });
        };

        Ctrl.editarFinca = F => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Editar Finca",
                Fields: [
                    {
                        Nombre: "Usuario",
                        Value: F.usuario_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Nombre",
                        Value: F.nombre,
                        Type: "string",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Dirección",
                        Value: F.direccion,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Departamento",
                        Value: F.departamento_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Municipio",
                        Value: F.municipio_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Área total",
                        Value: F.area_total,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Total de lotes",
                        Value: F.total_lotes,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Tipo de cultivo",
                        Value: TiposCultivo[0],
                        Type: "simplelist",
                        List: TiposCultivo,
                        Required: true
                    },
                    
                    {
                        Nombre: "Tipo de Suelo",
                        Value: TiposSuelo[0],
                        Type: "simplelist",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Zona",
                        Value: F.zona_id,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Latitud",
                        Value: F.latitud,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Longitud",
                        Value: F.longitud,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Hectareas",
                        Value: F.hectareas,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Sitios",
                        Value: F.sitios,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Temperatura (C°):",
                        Value: F.temperatura,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Humedad Relativa (%):",
                        Value: F.humedad_relativa,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Precipitacion Mm:",
                        Value: F.precipitacion,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Minima (Mt):",
                        Value: F.altimetria_min,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Maxima (Mt):",
                        Value: F.altimetria_max,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Brillo Solar (H):",
                        Value: F.brillo_solar,
                        Type: "string",
                        Required: true
                    }
                ],

                Confirm: { Text: "Guardar" }
            }).then(r => {
                if (!r) return;
                var FincaEditada = {
                    id: F.id,
                    usuario_id : r.Fields[0].Value,
                    nombre: r.Fields[1].Value,
                    direccion: r.Fields[2].Value,
                    departamento_id: r.Fields[3].Value,
                    municipio_id: r.Fields[4].Value,
                    area_total: r.Fields[5].Value,
                    total_lotes: r.Fields[6].Value,
                    tipo_cultivo: r.Fields[7].Value,
                    tipo_suelo: r.Fields[8].Value,
                    zona_id : r.Fields[9].Value,
                    latitud: r.Fields[10].Value,
                    longitud: r.Fields[11].Value,
                    hectareas: r.Fields[12].Value,
                    sitios: r.Fields[13].Value,
                    temperatura: r.Fields[14].Value,
                    humedad_relativa: r.Fields[15].Value,
                    precipitacion: r.Fields[16].Value,
                    altimetria_min: r.Fields[17].Value,
                    altimetria_max: r.Fields[18].Value,
                    brillo_solar: r.Fields[19].Value,

                };

            // Ctrl.FincasCRUD.dialog(F, {
            //     title: "Editar Finca" + F.nombre
            // }).then(r => {
            //     if (r == "DELETE") return Ctrl.FincasCRUD.delete(F);
                Ctrl.FincasCRUD.update(FincaEditada).then(() => {
                    Rs.showToast("Finca actualizada");
                });
            });
        };

        Ctrl.eliminarFinca = F => {
            Rs.confirmDelete({
                Title: "¿Eliminar Finca #" + F.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.FincasCRUD.delete(F);
            });
        };

        // $http.post("api/fincas/obtener", {}).then(r => {
        //     Ctrl.Fincas = r.data;
        //     Ctrl.abrirFinca(Ctrl.Fincas[3]); //FIX
        // });

        Ctrl.abrirFinca = F => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.FincaDiag",
                controller: "FincaDiagCtrl",
                locals: { Finca: F },
                fullscreen: false
            });
        };

        Ctrl.abrirOrganizacion = O => {
            $mdDialog.show({
                templateUrl: "Frag/GestionOrganizacion.Organizacion",
                controller: "FincasCtrl",
                locals: { Finca: O },
                fullscreen: false
            });
        };

        //Prueba de Lista
        $http
            .post("api/main/obtener-lista", {
                Lista: "Departamentos",
                op1: "COL"
            })
            .then(r => {
                console.log(r.data);
            });

        // LOTES
        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.get().then(() => {
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getLotes();

        // //Prueba de Mapa
        // $http.post('map.html').then(r => {
        //     Ctrl.mapa = r.data;
        // });

        Ctrl.nuevoLote = () => {
            Ctrl.LotesCRUD.dialog({
                Flex: 10,
                Title: "Crear Lote",

                Confirm: { Text: "Crear Lote" }
            }).then(r => {
                if (!r) return;
                Ctrl.LotesCRUD.add(r);
            });
        };

        Ctrl.editarLote = L => {
            Ctrl.LotesCRUD.dialog(L, {
                title: "Editar Lote" + L.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.LotesCRUD.delete(L);
                Ctrl.LotesCRUD.update(r).then(() => {
                    Rs.showToast("Lote actualizado");
                });
            });
        };

        Ctrl.eliminarLote = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LotesCRUD.delete(L);
            });
        };

        Ctrl.abrirLabores = L => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.LaboresDiag",
                controller: "LaboresDiagCtrl",
                locals: { Labor: L },
                fullscreen: false
            });
        };
        
    }
]);

angular.module('Labores_LaborEditorCtrl', [])
.controller('Labores_LaborEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Labor',
	function($scope, $rootScope, $http, $injector, $mdDialog, Labor) {

		console.info('Labores_LaborEditorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Labor = angular.copy(Labor);

		// Ctrl.LaboresCRUD = $injector.get('CRUD').config({ 
		// 	base_url: '/api/labores/labores',
		// 	limit: 1000,
		// 	add_append: 'refresh',
		// });

		Ctrl.getLabores = () => {
			Ctrl.LaboresCRUD.setScope('milabor', Labor.id).get();
		};

		Ctrl.getLabores();

		
        Ctrl.guardarLabor = () => {
            Ctrl.LaboresCRUD.update(Ctrl.Labor).then(() => {
						Rs.showToast("Labor Actualizada");
                
            });
        }

		$http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			
		});

		$http.post('api/zonas/obtener', {}).then(r => {
			Ctrl.zonas = r.data;
			
		});

	}
]);
angular.module("LaboresCtrl", []).controller("LaboresCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("LaboresCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;
        

        Ctrl.zona_select = null;
        Ctrl.linea_lp_select = null;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.LaboresCRUD = $injector.get("CRUD").config({
            base_url: "/api/labores/labores",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['zona']
        });

        Ctrl.getLabores = () => {
            console.log(Ctrl.zona_select);
            console.log(Ctrl.linea_lp_select);
            Ctrl.LaboresCRUD.setScope('lazona', Ctrl.zona_select);
            Ctrl.LaboresCRUD.setScope('lalineaproductiva', Ctrl.linea_lp_select);
            
            Ctrl.LaboresCRUD.get().then(() => {
                               
            });
        };

        // $scope.update = function() {
        //     // Ctrl.LaboresCRUD.setScope('lazona', Rs.Labor.zona_id);
        //     $scope.item.size.code = $scope.selectedItem.code
        //     // use $scope.selectedItem.code and $scope.selectedItem.name here
        //  }

       
        // Ctrl.getLabor();

        // Ctrl.nuevaLabor = () => {
        //     Ctrl.LaboresCRUD.dialog({
        //         Flex: 10,
        //         Title: "Crear Labor",
        //         Confirm: { Text: "Crear Labor" }
        //     }).then(r => {
        //         if (!r) return;
        //         Ctrl.LaboresCRUD.add(r);
        //     });
        // };
// 
Ctrl.nuevaLabor = () => {
    Rs.BasicDialog({
        Flex: 30,
        Title: "Crear Labor",
        Fields: [
            
            {
                Nombre: "Labor",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Zona",
                Value: Ctrl.zona_select,
                Type: "string",
                // List: zona_select,
                Required: true
            },
            {
                Nombre: "Linea Productiva",
                Value: Ctrl.linea_lp_select,
                Type: "string",
                // List: zona_select,
                Required: true
            },
            {
                Nombre: "Frecuencia",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Semana iInicio",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Margen",
                Value: "",
                Type: "string",
                Required: true
            }
        ],

        Confirm: { Text: "Crear Labor" }
    }).then(r => {
        if (!r) return;
        var nuevaLabor = {
            labor : r.Fields[0].Value,
            zona_id: r.Fields[1].Value,
            linea_productiva_id: r.Fields[2].Value,
            frecuencia: r.Fields[3].Value,
            semana_inicio: r.Fields[4].Value,
            margen: r.Fields[5].Value,
            

        };
        Ctrl.LaboresCRUD.add(nuevaLabor);
    });
};

// 
        
        Ctrl.editarLabor = (L) => {
            console.log(L);
			$mdDialog.show( { 
				templateUrl: 'Frag/AdministracionGeneral.Labores_LaborEditorDiag',
				controller: 'Labores_LaborEditorCtrl',
				locals: { Labor: L },
				scope: Ctrl.$new()
			});
		}

        Ctrl.eliminarLabor = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Labor #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LaboresCRUD.delete(L);
            });
        };

        Ctrl.obtener_lp = () =>{
            return $http.post('api/lineasproductivas/obtener', {}).then(r => {
                Ctrl.lineas_productivas = r.data;
                Ctrl.linea_lp_select = Ctrl.lineas_productivas[0].id;
                
            });

        }
        Ctrl.obtener_zonas = ()=>{
            return $http.post('api/zonas/obtener', {}).then(r => {
                Ctrl.zonas = r.data;
                Ctrl.zona_select = Ctrl.zonas[0].id;
                
            });
        }

        Promise.all([
            Ctrl.obtener_lp(),
            Ctrl.obtener_zonas()
        ]).then(() => {
            Ctrl.getLabores();
        });
	
    }
]);

angular.module('LineasProductivasCtrl', [])
    .controller('LineasProductivasCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            //console.info('LineasProductivasCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.LineasProductivasCRUD = $injector.get('CRUD').config({
                base_url: '/api/lineasproductivas/lineasproductivas',
                limit: 1000,
                add_append: 'refresh',
            });
            //console.log(Ctrl.LineasProductivasCRUD);

            Ctrl.getLineasProductivas = () => {
                Ctrl.LineasProductivasCRUD.get().then(() => {});
                //Ctrl.nuevo();
            };

            Ctrl.getLineasProductivas();

            Ctrl.nuevo = () => {
                Ctrl.LineasProductivasCRUD.dialog({}, {
                    title: 'Agregar Linea Productiva'
                }).then(lp => {
                    Ctrl.LineasProductivasCRUD.add(lp)
                        .then(() => {
                            Rs.showToast('Linea productiva creada')
                        });
                });
            }

            Ctrl.editar = (LP) => {
                Ctrl.LineasProductivasCRUD.dialog(LP, {
                    title: 'Editar Linea Productiva ' + LP.nombre
                }).then(dato => {
                    if (dato == 'DELETE')
                        return Ctrl.LineasProductivasCRUD.delete(LP);
                    //console.log(dato);
                    Ctrl.LineasProductivasCRUD.update(dato)
                        .then(() => {
                            Rs.showToast('Linea productiva actualizada')
                        });
                });
            };

            Ctrl.guardarLP = (LP) => {
                Ctrl.LineasProductivasCRUD.update(LP);
            }

            Ctrl.cargarImagen = async(LP) => {
                //console.log('id ' + LP.id);
                var Imagen = await $mdDialog.show({
                    templateUrl: 'templates/dialogs/image-editor.html',
                    controller: 'ImageEditor_DialogCtrl',
                    multiple: true,
                    locals: {
                        Config: {
                            Theme: 'default',
                            CanvasWidth: 200,
                            CanvasHeight: 200,
                            CropWidth: 200,
                            CropHeight: 200,
                            MinWidth: 50,
                            MinHeight: 50,
                            KeepAspect: true,
                            Preview: false,
                            Daten: {
                                Path: 'files/lineasproductivas_media/' + LP.id + '.jpg'
                            }
                        }
                    }
                });
            };
        }

    ]);
//INICIO DEV ANGÉLICA
angular.module('ListaEditDialogCtrl', [])
.controller('ListaEditDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Lista',
	function($scope, $rootScope, $http, $injector, $mdDialog, Lista) {

		console.info('ListaEditDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;


		// debugger;
		Ctrl.Cancel = $mdDialog.cancel;
		Ctrl.Lista = angular.copy(Lista);
		console.log(Ctrl.Lista);
		Ctrl.url = '';
		Ctrl.Hide = $mdDialog.hide;
		//Ctrl.Autoincremental = false;

		/*Ctrl.ListaCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/lista/lista',
			limit: 1000,
			add_append: 'refresh',
		});*/

		Ctrl.addListadetalle = () => {
			if(!Ctrl.Lista.listadetalle || Ctrl.Lista.listadetalle.length===0 || Ctrl.Lista.listadetalle [Ctrl.Lista.listadetalle.length-1].descripcion.length>0){
				Ctrl.Lista.listadetalle.push({
					id: -1,
					lista_id: Ctrl.Lista.id,
					codigo: Ctrl.Autoincremental ? Ctrl.Lista.listadetalle?.length+1: '',
					descripcion: '',
					op1: '',
					op2: '',
					op3: '',
					op4: '',
					op5: '',
				})
				
			}
		}

		Ctrl.getLista = () => {
			$http.get ('api/lista/lista/'+ Ctrl.Lista.id, {}).then((r)=>{
				console.log(r);
				Ctrl.Lista = r.data;
				Ctrl.Autoincremental = Ctrl.Lista.autoincremental ===1 ; 
				Ctrl.addListadetalle();
			});
		}

		Ctrl.getLista();

		Ctrl.guardarLista = () => {
			$http.post('api/lista/actualizar', {Lista: Ctrl.Lista}).then((r)=>{
				Ctrl.Lista = r.data;
				console.log(Ctrl.Lista);
			})
		}

		
		Ctrl.eliminarLista = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar elemento de la lista?',
			}).then(R => {
				$http.post('api/lista/delete', {id:C.id}).then((r)=>{
					Ctrl.Lista = r.data;
					console.log(Ctrl.Lista);
				})

				/*if(!R) return;
				Ctrl.ListaCRUD.delete(L);*/
			});
		}


	}

 
]);

//FIN DEV ANGÉLICA
angular.module("LotesCtrl", []).controller("LotesCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("LotesCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

       
        Ctrl.Salir = $mdDialog.cancel;

        // Ctrl.getLote = () => {
        //     // Ctrl.LotesCRUD.setScope("id", Rs.Usuario.finca_id); //Me trae las fincas del usuario
        //     Ctrl.LotesCRUD.get().then(() => {
        //         Ctrl.Lote = Ctrl.LotesCRUD.rows[0];
        //         //Ctrl.editarFinca(Ctrl.LotesCRUD.rows[0]);
        //     });
        // };
      
        // LOTES
        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.get().then(() => {
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getLotes();

        // //Prueba de Mapa
        // $http.post('map.html').then(r => {
        //     Ctrl.mapa = r.data;
        // });

        Ctrl.nuevoLote = () => {
            Ctrl.LotesCRUD.dialog({
                Flex: 10,
                Title: "Crear Lote",

                Confirm: { Text: "Crear Lote" }
            }).then(r => {
                if (!r) return;
                Ctrl.LotesCRUD.add(r);
            });
        };

        Ctrl.editarLote = L => {
            Ctrl.LotesCRUD.dialog(L, {
                title: "Editar Lote" + L.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.LotesCRUD.delete(L);
                Ctrl.LotesCRUD.update(r).then(() => {
                    Rs.showToast("Lote actualizado");
                });
            });
        };

        Ctrl.eliminarLote = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LotesCRUD.delete(L);
            });
        };

        //    Ctrl.abrirLote = (L) => {
        //         $mdDialog.show({
        //             templateUrl: "Frag/MiFinca.FincaDiag",
        //             controller: "FincaDiagCtrl",
        //             locals: { Lote: L },
        //             fullscreen: false,
        //         });
        //     };

        // LABORES
        Ctrl.abrirLabores = L => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.LaboresDiag",
                controller: "LaboresDiagCtrl",
                locals: { Labor: L },
                fullscreen: false
            });
        };
        
    }
]);

angular.module('Organizaciones_OrganizacionEditorCtrl', [])
.controller('Organizaciones_OrganizacionEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
	function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

		console.info('Organizaciones_OrganizacionEditorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Caso = angular.copy(Caso);

		Ctrl.SeccionesCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/organizaciones/secciones',
			limit: 1000,
			add_append: 'refresh',
		});

		Ctrl.getSecciones = () => {
			Ctrl.SeccionesCRUD.setScope('laorganizacion', Organizacion.id).get();
		}
		Ctrl.getOrganizaciones();

	}
]);
angular.module("OrganizacionesCtrl", []).controller("OrganizacionesCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    "Upload",  //DEV ANGÉLICA --> 
    function($scope, $rootScope, $http, $injector, $mdDialog, Upload) {
        console.info("OrganizacionesCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        Ctrl.Salir = $mdDialog.cancel;
		
        Ctrl.OrganizacionesCRUD = $injector.get("CRUD").config({
            
            base_url: "/api/organizaciones/organizaciones",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.myHTML =
        'I am an <code>HTML</code>string with ' +
        '<a href="#">links!</a> and other <em>stuff</em>';
        
        //INICIO DEV ANGÉLICA -- MURO
        Ctrl.OrganizacionesmuroseccionesCRUD = $injector.get('CRUD').config({ 
            base_url: '/api/organizacionesmurosecciones/organizacionesmurosecciones',
            limit: 1000,
			add_append: 'refresh',
            query_with: ['usuario'],
			order_by: [ '-created_at' ]
		});
        console.log(Ctrl.OrganizacionesmuroseccionesCRUD);

        Ctrl.obtenerSecciones = (organizacion_id) => {
            // console.log('nos mostrara algo?');
            // console.log(Ctrl.OrganizacionesCRUD);
            Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', organizacion_id).get();
		};
        //console.log(Ctrl.obtenerSecciones);

        //console.log(Ctrl.OrganizacionesmuroseccionesCRUD);

        //FIN DEV ANGÉLICA

        Ctrl.getOrganizacion = () => {
            // Ctrl.OrganizacionesCRUD.setScope('id', Rs.Usuario.organizacion_id); //Me trae las organizaciones por usuario
            Ctrl.OrganizacionesCRUD.get().then(() => {
                Ctrl.Organizacion = Ctrl.OrganizacionesCRUD.rows[0];
                Ctrl.obtenerSecciones(Ctrl.Organizacion.id);
                //Ctrl.editarOrganizacion(Ctrl.OrganizacionesCRUD.rows[0]);
            });
        };

        Ctrl.getOrganizacion();

        Ctrl.nuevaOrganizacion = () => {
            Ctrl.OrganizacionesCRUD.dialog({
                Flex: 10,
				Title: 'Crear Organización',
				
				Confirm: { Text: 'Crear Organizacion' },
            }).then(r => {
                if (!r) return;
                Ctrl.OrganizacionesCRUD.add(r);
            });
        };

        Ctrl.editarOrganizacion = (O) => {
			Ctrl.OrganizacionesCRUD.dialog(O, {
				title: 'Editar Organización' + O.nombre
			}).then(r => {
				if(r == 'DELETE') return Ctrl.OrganizacionesCRUD.delete(O);
				Ctrl.OrganizacionesCRUD.update(r).then(() => {
					Rs.showToast('Organizacion actualizada');
				});
			});
		}

		Ctrl.eliminarOrganizacion = (O) => {
			Rs.confirmDelete({
				Title: '¿Eliminar Organizacion #'+O.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.OrganizacionesCRUD.delete(O);
			});
        }

        //INICIO DEV ANGÉLICA

        /*Ctrl.abrirMuroDialog = () => {
            //console.log('es el caso ' + C.id);
            $mdDialog.show({
                templateUrl: 'Frag/GestionOrganizacion.OrganigramaDiag',
                //templateUrl: 'Frag/GestionOrganizacion.',
                controller: 'OrganizacionDiagCtrl',
                locals: {
                },
                //scope: Ctrl.$update()
            });
        };*/


        //FIN DEV ANGÉLICA

        //Abre el modal de publicaciones del muro 

		Ctrl.abrirOrganigrama = (O) => {
            // console.log(O);
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganigramaDiag',
				controller: 'OrganizacionDiagCtrl',
				locals: { Organizacion: O },
				fullscreen: false,
			});
        }


    //INICIO DEV ANGÉLICA 
        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.abrirArticulomuro = (A) => {
            console.log(A);
			$mdDialog.show({
				//templateUrl: 'Frag/GestionOrganizacion.OrganizacionesmuroEditorDiag',
                templateUrl: 'templates/dialogs/image-editor.html',               
				controller: 'ImageEditor_DialogCtrl',
				locals: {Organizacionesmurosecciones: A},
			});
        }

                //Carga imagen al servidor
                Ctrl.subirImagen = ($file) => {
                    if(!$file) return;
        
                    Upload.upload({
                        url: 'api/main/upload-imagen',
                        data: {file: $file,
                            Path: 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg',
                            Ancho: 560, Alto: 300, Quality: 90
                        }
                    }).then(function (resp) {
                        console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
                    }, function (resp) {
                        console.log('Error status: ' + resp.status);
                    });
                }
        
            
        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.nuevoArticuloMuro = (O) => {
            console.log(O);
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganizacionesmuroEditorDiag',
				controller: 'ArticulomuroEditDialogCtrl',
				locals: {  },
				fullscreen: false,
			}).then(function (resp) {
                Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', Rs.Usuario.organizacion_id).get();
            }, function (resp) {
                console.log('Error status: ' + resp.status); 
            });

        }

        // Creamos listado de Tipo de novedad
        Ctrl.TipoNovedad = {
            'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
            'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
        }

        Ctrl.DarFormatoFecha = (fecha) => {
            debugger;
            const dias = fecha.diff(now(), 'days');

            debugger;
            if (dias === 0) {
                return 'Publicado hoy';
            } else {
                if (dias > 30) {
                    return'Publicado hace ' + dias / 30 + ' meses';
                } else {
                    return'Publicado hace ' + dias + ' dias';
                }
            }
        }

        Ctrl.Update = () => {
            alert("Update");
        }
    //FIN DEV ANGÉLICA

    }
]);




angular.module('PerfilesCtrl', [])
    .controller('PerfilesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            //console.info('PerfilesCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Obtener la información de los perfiles existentes.
            Ctrl.PerfilesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/perfiles',
                limit: 100,
                add_append: 'refresh',
            });
            Ctrl.getPerfiles = () => {
                Ctrl.PerfilesCRUD.get().then(() => {
                    Ctrl.abrirPerfil(Ctrl.PerfilesCRUD.rows[0]);
                });
            };

            Ctrl.PerfilesSeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/secciones',
                limit: 100,
                add_append: 'refresh',
                order_by: ['seccion_id']
            });
            Ctrl.getPerfilesSeccion = () => {
                Ctrl.PerfilesSeccionesCRUD.get().then(() => {});
            };

            // Ejecutar el metodo para cargar los registros al controlador
            // Ctrl.getPerfiles();

            // Obtener la información de las secciones existentes.
            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/secciones/secciones',
                // base_url: '/api/secciones/seccionesPerfil',
                limit: 100,
                add_append: 'refresh',
                //order_by: ['seccion']
            });
            Ctrl.getSecciones = () => {
                return Ctrl.SeccionesCRUD.get().then(() => {
                    var secciones = {};
                    Ctrl.SeccionesCRUD.rows.forEach(S => {
                        secciones[S.id] = S;
                    });
                    Ctrl.secciones = secciones;
                });
            };

            // Ejecutar el metodo para cargar los registros al controlador
            Ctrl.getSecciones().then(Ctrl.getPerfiles());

            // Crear arreglo
            Ctrl.nivelesSeguridad = [
                { 'nivel': 0, 'etiqueta': 'Sin acceso', 'icono': 'fa-lock' },
                { 'nivel': 10, 'etiqueta': 'Visualización', 'icono': 'fa-eye' },
                { 'nivel': 20, 'etiqueta': 'Adición', 'icono': 'fa-plus' },
                { 'nivel': 30, 'etiqueta': 'Edición', 'icono': 'fa-pen' },
                { 'nivel': 40, 'etiqueta': 'Borrado', 'icono': 'fa-trash' },
                { 'nivel': 50, 'etiqueta': 'Control Total', 'icono': 'fa-hdd' },
            ];

            // Función para cargar las secciones segun el perfil seleccionado.
            Ctrl.abrirPerfil = (P) => {
                Ctrl.perfilSel = P;

                Ctrl.PerfilesSeccionesCRUD.setScope('perfil', P.id).get().then(() => {
                    angular.forEach(Ctrl.secciones, S => {
                        S.nivel = 0;
                    });
                    angular.forEach(Ctrl.PerfilesSeccionesCRUD.rows, PS => {
                        Ctrl.secciones[PS.seccion_id].nivel = PS.nivel;
                    });
                });

            };

            Ctrl.guardarPermisos = () => {
                $http.post('api/perfiles/guardar-permisos', {
                    'perfil_id': Ctrl.perfilSel.id,
                    'secciones': Ctrl.secciones
                });
            };
        }
    ]);
angular.module('Zonas_ZonaEditorCtrl', [])
.controller('Zonas_ZonaEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Zona',
	function($scope, $rootScope, $http, $injector, $mdDialog, Zona) {

		console.info('Zonas_ZonaEditorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Zona = angular.copy(Zona);

		// Ctrl.zonasCRUD = $injector.get('CRUD').config({ 
		// 	base_url: '/api/zonas/zonas',
		// 	limit: 1000,
		// 	add_append: 'refresh',
		// });

		Ctrl.getZonas = () => {
			Ctrl.ZonasCRUD.setScope('lazona', Zona.id).get();
		};

		Ctrl.getZonas();

		
        Ctrl.guardarZona = () => {
            Ctrl.ZonasCRUD.update(Ctrl.Zona).then(() => {
						Rs.showToast("Zona Actualizada");
                
            });
        }

		$http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			
		    });

	}
]);
angular.module("ZonasCtrl", []).controller("ZonasCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("ZonasCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.ZonasCRUD = $injector.get("CRUD").config({
            base_url: "/api/zonas/zonas",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getZona = () => {
            // Ctrl.ZonasCRUD.setScope('id', Rs.Usuario.Zona_id);
            Ctrl.ZonasCRUD.get().then(() => {
                Ctrl.Zona = Ctrl.ZonasCRUD.rows[0];
                //Ctrl.editarZona(Ctrl.ZonasCRUD.rows[0]);
            });
        };

        Ctrl.getZonas = () => {
            Ctrl.ZonasCRUD.get().then(() => {});
            //Ctrl.nuevo();
        };

        Ctrl.getZona();

        Ctrl.nuevaZona = () => {
            Ctrl.ZonasCRUD.dialog({
                Flex: 10,
                Title: "Crear Zona",
                Confirm: { Text: "Crear Zona" }
            }).then(r => {
                if (!r) return;
                Ctrl.ZonasCRUD.add(r);
            });
        };

        Ctrl.editarZona = (Z) => {
            console.log(Z);
			$mdDialog.show( {
				templateUrl: 'Frag/AdministracionGeneral.Zonas_ZonaEditorDiag',
				controller: 'Zonas_ZonaEditorCtrl',
				locals: { Zona: Z },
				scope: Ctrl.$new()
			});
		}


        // Ctrl.editarZona = Z => {
        //     Ctrl.ZonasCRUD.dialog(Z, {
        //         title: "Editar Zona" + Z.descripcion
        //     }).then(r => {
        //         if (r == "DELETE") return Ctrl.ZonasCRUD.delete(Z);
        //         Ctrl.ZonasCRUD.update(r).then(() => {
        //             Rs.showToast("Zona actualizada");
        //         });
        //     });
        // };

        Ctrl.eliminarZona = Z => {
            Rs.confirmDelete({
                Title: "¿Eliminar Zona #" + Z.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.ZonasCRUD.delete(Z);
            });
        };

        Ctrl.abrirOrganigrama = Z => {
            // console.log(O);
            $mdDialog.show({
                templateUrl: "Frag/GestionZona.OrganigramaDiag",
                controller: "ZonaDiagCtrl",
                locals: { Zona: Z },
                fullscreen: false
            });
        };
    }
]);

angular.module('BasicDialogCtrl', [])
.controller(   'BasicDialogCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;
		Ctrl.periodDateLocale = {
			formatDate: (date) => {
				if(typeof date == 'undefined' || date === null || isNaN(date.getTime()) ){ return null; }else{
					return moment(date).format('YMM');
				}
			}
		};

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.SendData = function(){
			$mdDialog.hide(Ctrl.Config);
		}

		Ctrl.selectItem = (Field, item) => {
			if(!Field.opts.itemVal){
				Field.Value = item;
			}else{
				Field.Value = item[Field.opts.itemVal];
			}
			
		};

		Ctrl.Delete = function(ev) {
			if(Config.HasDelete){
				Config.HasDeleteConf = true;

				Ctrl.SendData();
			}
		}
	}

]);
angular.module('BottomSheetCtrl', [])
.controller('BottomSheetCtrl', ['$scope', '$rootScope', '$mdBottomSheet', 'Config', 
	function($scope, $rootScope, $mdBottomSheet, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.Cancel = function(){ $mdBottomSheet.cancel(); }

		Ctrl.Config = angular.copy(Config);

		Ctrl.Send = function(Item){
			$mdBottomSheet.hide(Item);
		}
	}
]);
angular.module('ConfirmCtrl', [])
.controller(   'ConfirmCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}

		Ctrl.Send = function(val){
			$mdDialog.hide(val);
		}
		
	}

]);
angular.module('ConfirmDeleteCtrl', [])
.controller(   'ConfirmDeleteCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.hide(false);
		}

		Ctrl.Delete = function(){
			$mdDialog.hide(true);
		}
		
	}

]);
angular.module('CRUDDialogCtrl', [])
.controller('CRUDDialogCtrl', ['$rootScope', '$scope', '$mdDialog', 'ops', 'config', 'columns', 'Obj', 'rows', 
	function($rootScope, $scope, $mdDialog, ops, config, columns, Obj, rows) {

		console.info('CRUDDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.config = {};
		Ctrl.columns = columns;
		Ctrl.Obj = {};
		//Ctrl.Obj = angular.copy(Obj);

		//Saber si es nuevo
		Ctrl.new = !(ops.primary_key in Obj);
		Ctrl.config.confirmText = Ctrl.new ? 'Crear' : 'Guardar';
		Ctrl.config.title = Ctrl.new ? ('Nuevo '+ops.name) : ('Editando '+ops.name);
		Ctrl.config.delete_title = '¿Borrar '+ops.name+'?';

		angular.forEach(columns, function(F){
			if(F.Default !== null){
				var DefValue = angular.copy(F.Default);only
				Ctrl.Obj[F.Field] = DefValue;
			};

			F.show = true;
			if(config.only.length > 0){
				F.show = Rs.inArray(F.Field, config.only);
			};
			if(config.except.length > 0){
				F.show = !Rs.inArray(F.Field, config.except); 
			};
		});

		angular.extend(Ctrl.Obj, Obj);
		angular.extend(Ctrl.config, config);

		Ctrl.cancel = function(){ $mdDialog.hide(false); };

		Ctrl.sendData = function(){
			//Verificar los Uniques
			var Errors = 0;
			angular.forEach(columns, function(C){
				if(C.Unique){
					//console.log(ops.primary_key, Ctrl.Obj[ops.primary_key]);
					var except = Ctrl.new ? false : [ ops.primary_key, Ctrl.Obj[ops.primary_key] ];
					var Found = Rs.found(Ctrl.Obj[C.Field], rows, C.Field, undefined, except );
					if(Found) Errors++;
				};
			});

			if(Errors > 0) return false;

			$mdDialog.hide(Ctrl.Obj);
		};


		Ctrl.delete = function(ev){
			var config = {
				Title: Ctrl.config.delete_title,
			};

			Rs.confirmDelete(config).then(function(del){
				if(del){
					$mdDialog.hide('DELETE');
				};
			});
		};


		
		//Campos
		//Ctrl.fields = angular.copy

	}
]);
angular.module('ExternalLinkCtrl', [])
.controller(   'ExternalLinkCtrl', ['$scope', 'Link', '$mdDialog', '$sce',  
	function ($scope, Link, $mdDialog, $sce) {

		var Ctrl = $scope;

		Ctrl.Link = $sce.trustAsResourceUrl(Link);

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}
		
	}

]);
angular.module('FileDialogCtrl', [])
.controller('FileDialogCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$mdToast', 'FileSel', 
	function($scope, $rootScope, $http, $mdDialog, $mdToast, FileSel) {

		console.info('FileDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.FileSel = FileSel;
		Ctrl.inArray = Rs.inArray;

		//Dialog
		Ctrl.Cancel = function(){
			$mdDialog.hide();
		};

	}
]);
angular.module('IconSelectDiagCtrl', [])
.controller(   'IconSelectDiagCtrl', ['$scope',  '$mdDialog', '$http', '$filter',
	function ($scope, $mdDialog, $http, $filter) {

		var Ctrl = $scope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filter = ''; Ctrl.CatSel = null;

		$http.get('/api/Main/iconos').then((r) => {
			Ctrl.Categorias = r.data.Categorias;
			Ctrl.IconosRaw	= r.data.Iconos;
		});

		Ctrl.Iconos = [];

		Ctrl.filterCat = (C) => { Ctrl.CatSel = C; Ctrl.filterIconos(); }

		Ctrl.filterIconos = () => {
			console.log(Ctrl.CatSel, Ctrl.filter);
			if(Ctrl.CatSel == null && Ctrl.filter == ''){ Ctrl.Iconos = []; }
			else if(Ctrl.filter !== ''){   Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, Ctrl.filter) }
			else if(Ctrl.CatSel !== null){ Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, { Categoria: Ctrl.CatSel }) };
		};

		Ctrl.selectIcon = (I) => {
			$mdDialog.hide(I.IconoFull);
		};
		
	}

]);
angular.module('ImageEditor_DialogCtrl', [])
.controller(   'ImageEditor_DialogCtrl', ['$scope', '$rootScope', '$mdDialog', '$mdToast', '$timeout', '$http', 'Upload', 'Config', 
	function ($scope, $rootScope, $mdDialog, $mdToast, $timeout, $http, Upload, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;

		console.info('-> Image Editor');

		Ctrl.Config = {
			Theme : 'Snow_White',		//El tema
			Title: 'Cambiar Imágen',	//El Titulo
			CanvasWidth:  350,			//Ancho del canvas
			CanvasHeight: 350,			//Alto del canvas
			CropWidth:  100,			//Ancho del recorte que se subirá
			CropHeight: 100,			//Alto del recorte que se subirá
			MinWidth:  50,				//Ancho mínimo del selector
			MinHeight: 50,				//Ancho mínimo del selector
			KeepAspect: true,			//Mantener aspecto
			Preview: false,				//Mostrar vista previa
			PreviewClass: '',			//md-img-round
			RemoveOpt: false,			//Si es texto muestra la opcion de borrar
			Daten: null					//La data a enviar al servidor
		};

		Ctrl.RotationCanvas = document.createElement("canvas");

		Ctrl.cropper = {};
		Ctrl.cropper.sourceImage = null;
		Ctrl.cropper.croppedImage = null;
		Ctrl.bounds = {};

		Ctrl.Progress = null;

		angular.extend(Ctrl.Config, Config);

		Ctrl.CancelText = Ctrl.Config.RemoveOpt ? Ctrl.Config.RemoveOpt : 'Cancelar';
		
		Ctrl.CancelBtn = function(){
			if(!Ctrl.Config.RemoveOpt){
				Ctrl.Cancel();
			}else{
				$http.post('/api/Upload/remove', { Path: Ctrl.Config.Daten.Path }).then(function(){
					$mdDialog.hide({Removed: true});
				});
			}
		}

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.Rotar = function(dir){
			var canvas = Ctrl.RotationCanvas;
			var ctx = canvas.getContext("2d");

			var image = new Image();
			image.src = Ctrl.cropper.sourceImage;
			image.onload = function() {
				canvas.width = image.height;
				canvas.height = image.width;
				ctx.rotate(dir * Math.PI / 180);
				ctx.translate(0, -canvas.width);
				ctx.drawImage(image, 0, 0); 
				Ctrl.cropper.sourceImage = canvas.toDataURL();
			};
		}

		Ctrl.$watch('Ctrl.cropper.sourceImage', function(nv, ov){
			if(nv){
				console.log('Imagen Cargada');
			}
		});

		Ctrl.SendImage = function(){

			var Daten = {
				file: Upload.dataUrltoBlob(Ctrl.cropper.croppedImage),
				Quality: 90
			};

			angular.extend(Daten, Config.Daten);

			Upload.upload({

				url: '/api/main/upload-img',
				data: Daten,

			}).then(function (res) {
				
				$timeout(function () {
					$mdDialog.hide(res.data);
				});

			}, function (response) {
				if (response.status > 0){
					
					var Msg = response.status + ': ' + response.data;
					var errTxt = '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>';

					$mdToast.show({
						template: errTxt,
						hideDelay: 5000
					});

				}
			}, function (evt) {
				Ctrl.Progress = parseInt(100.0 * evt.loaded / evt.total);
			});

		}

		//console.log(angular.element(document.querySelector('#Canvas')));
	}

]);
angular.module('ImportCtrl', [])
.controller('ImportCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$sce', 'Upload', 'Config',
	function($scope, $rootScope, $http, $mdDialog, $sce, Upload, Config) {

		console.info('ImportCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filterAccion = '';
		Ctrl.inArray = Rs.inArray;

		Ctrl.Config = {
			Titulo: 'Importar', TituloIcono: 'fa-upload', 
			Paso: 1,
			Pasos: [ '',
				'Subir Plantilla',
				'Verificar Datos',
				'Importando',
				'Finalizado'
			],
			PlantillaUrl: false,
			PlantillaMsg: 'Descarge la plantilla y diligenciela con sus datos luego puede cargarla en esta pantalla.',
			PlantillaMsg2: '',
			PlantillaDown: [ 'fa-download' ],
			UploadUrl: 'api/Archivos/upload',
			SyncUrl: '',
			UploadData: {},
			Campos: [],
			FilaInicial: 2,
			ImportAcciones: {
				Crear:      { cant: 0, icono: 'fa-plus', clase: 'bg-lightgreen' },
				Actualizar: { cant: 0, icono: 'fa-sync-alt', clase: 'bg-yellow' },
				Eliminar:   { cant: 0, icono: 'fa-trash', clase: 'bg-lightred' },
				Errores:    { cant: 0, icono: 'fa-exclamation-triangle', clase: 'bg-lightpurple' }
			},
			testUpload: false,
		};
		
		angular.extend(Ctrl.Config, Config);

		Ctrl.DownloadPlantilla = function(){
			$http.get(Ctrl.Config.PlantillaUrl, { responseType: 'arraybuffer' }).then(function(r) {
        		var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
		        var filename = Ctrl.Config.PlantillaUrl.split('/').pop();
		        saveAs(blob, filename);
        	});
		};


		Ctrl.UploadTemplate = function(file, invalidfile){
			if(file) {
	            Upload.upload({
					url: Ctrl.Config.UploadUrl,
					method: 'POST',
					file: file,
					data: {
						Data:   Ctrl.Config.UploadData,
						Campos: Ctrl.Config.Campos,
						FilaInicial: Ctrl.Config.FilaInicial
					}
				}).then(function(r){

					Ctrl.ImportData = r.data;
					Ctrl.VerifyData();
					/*if(r.status == 200){
						
					}else{
						Ctrl.Config.Paso = 6;
					};*/
				});
			};
		};

		Ctrl.testUpload = () => {
			$http.post(Ctrl.Config.UploadUrl, {
				Data:   Ctrl.Config.UploadData,
				Campos: Ctrl.Config.Campos,
				FilaInicial: Ctrl.Config.FilaInicial
			}).then(r => {
				Ctrl.ImportData = r.data;
				Ctrl.VerifyData();
			});
		}


		CountAcciones = () => {
			angular.forEach(Ctrl.Config.ImportAcciones, (A) => {
				A.cant = 0;
			});

			angular.forEach(Ctrl.ImportData, (Row) => {
				Ctrl.Config.ImportAcciones[Row._import_action].cant ++;
			});

			//Ctrl.doSync(); //FIX
		};

		Ctrl.VerifyData = function(){
			

			if(Ctrl.ImportData.length > 0){
				Ctrl.Config.Paso = 2;
				CountAcciones();
			}else{
				Ctrl.finishSync('No se encontraron cambios', 'Alert');
			};

			

			/*$http.post(Ctrl.Config.VerifyUrl, { Config: Ctrl.Config }).then(function(r){
				var Msgs = r.data;
				console.log(Msgs);
				if(Msgs.length == 0){
					Ctrl.Config.Paso = 3;
				}else{ //Hubo errores en la verificacion
					Ctrl.Config.Paso = 5;
					Ctrl.Errores = Msgs;
				}
			});*/
		}

		Ctrl.viewAcciones = (kA) => {
			if(Ctrl.filterAccion == kA) return Ctrl.filterAccion = '';
			Ctrl.filterAccion = kA;
		}

		//Ctrl.VerifyData();

		Ctrl.doSync = () => {
			Ctrl.Config.Paso = 3;
			$http.post(Ctrl.Config.SyncUrl, { ImportData: Ctrl.ImportData, Campos: Ctrl.Config.Campos }).then((r) => {
				Ctrl.finishSync('Sincronización terminada exitosamente', 'Ok');
			});
		}

		Ctrl.finishSync = (Msg, Status) => {
			Ctrl.Config.Paso = 4;
			Ctrl.FinishMsg = Msg;
			Ctrl.FinishStatus = Status;
		}

		Ctrl.finishDiag = () => {
			$mdDialog.hide();
		}

		Ctrl.DownloadErrors = function(){
			var Headers = [ 'Fila', 'Error' ];
			var e = {
        		filename: 'Errores_Importacion',
        		ext: 'xls',
        		sheets: [
        			{
						name: 'Errores',
						headers: Headers,
						rows: Ctrl.Errores,
					}
        		]
			};
			Rs.DownloadExcel(e);
		};

		//console.log(Ctrl.Config.PlantillaUrl);

		if(Ctrl.Config.testUpload) Ctrl.testUpload(); //FIX
		//Ctrl.finishSync('Sincronización terminada exitosamente');

	}
]);
angular.module('ListSelectorCtrl', [])
.controller('ListSelectorCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', 'List', 'Config',
	function($scope, $rootScope, $http, $mdDialog, List, Config) {

		//console.info('ListSelectorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Config = Config;
		Ctrl.Searching = false;

		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

		Ctrl.getData = function(){
			Ctrl.Searching = true;
			//Traer los datos del servidor
			$http({
				method: Ctrl.Config.remoteMethod,
				url: Ctrl.Config.remoteUrl,
				data: Ctrl.Config.remoteData,
			}).then(function(r){
				Ctrl.Searching = false;
				Ctrl.List = r.data;
			}, function(){
				Ctrl.Searching = false;
			});
		};

		//Si pasan la lista usarla
		if(List !== null){
			Ctrl.List = List;
		}else if(Ctrl.Config.remoteUrl){
			Ctrl.getData();
		};

		Ctrl.changeSearch = function(){

			if(Ctrl.Config.remoteQuery){
				if(Ctrl.Searching) return false;
				Ctrl.Config.remoteData.filter = Ctrl.Search;
				Ctrl.getData();
			}else{
				Ctrl.SearchFilter = Ctrl.Search;
			}
		}

		Ctrl.Resp = function(Row){
			$mdDialog.hide(Row);
		}


	}
]);
angular.module('RelsManagerCtrl', [])
.controller('RelsManagerCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Config', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Config) {

		console.info('RelsManagerCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		
		Ctrl.Config = {
			Titulo: 'Gestionar Relaciones',
			Theme: 'Snow_White', 
		};
		
		angular.extend(Ctrl.Config, Config);

	}
]);
angular.module('FondoRotatorio_CreditosCtrl', [])
.controller('FondoRotatorio_CreditosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('FondoRotatorio_CreditosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.AsociadosNav = true;
		Ctrl.Asociado = null;
	
		Ctrl.buscarAsociados = (query) => {
			return Rs.http('api/usuario/buscar-usuario', { 'query': query });
		}

		Ctrl.selectAsociado = (Asociado) => {
			Ctrl.Asociado = Asociado;
		}

		/*Rs.http('api/usuario/buscar-usuario', { 'query': '1093' }).then(r => {
			Ctrl.Asociado = r[0];
			Ctrl.nuevoCredito();
		});*/

		Ctrl.nuevoCredito = function(){
			$mdDialog.show({
				controller: 'FondoRotatorio_NuevoCreditoDiagCtrl',
				templateUrl: '/Frag/FondoRotatorio.Creditos_NuevoCreditoDiag',
				clickOutsideToClose: false,
				locals: { Asociado: Ctrl.Asociado, myUser: Rs.Usuario, Parent: Ctrl, Simulate: false },
				fullscreen: true,
			}).then(function(Cred) { 
				//Ctrl.ViewCredit(Cred);
				//Ctrl.LoadCreditos();
			});
		}

	}
]);
angular.module('FondoRotatorio_NuevoCreditoDiagCtrl', [])
.controller('FondoRotatorio_NuevoCreditoDiagCtrl', ['$scope', '$rootScope', '$injector', '$mdDialog', '$mdToast', '$http', 'CreditoSrv', 'Asociado', 'myUser', 'Parent', 'Simulate',
	function($scope, $rootScope, $injector, $mdDialog, $mdToast, $http, CreditoSrv, Asociado, myUser, Parent, Simulate) {

		console.info('FondoRotatorio_NuevoCreditoDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.Theme = 'Snow_White';
		Ctrl.Title = '';
		Ctrl.Parent = Parent;
		Ctrl.Simulate = Simulate;
		Ctrl.Hoy = moment().format('L');
		Ctrl.myUser = myUser;

		Ctrl.Cancelar = function(){ $mdDialog.cancel(); }

		Ctrl.Scales = CreditoSrv.Scales;
		//Ctrl.Lineas = Parent.Vars.LINEAS;
		Ctrl.Lineas = ['Libre Inversión']
		
		Ctrl.Credit = {
			Linea: Ctrl.Lineas[0],
			Monto: 1000000,
			Periodos: 6,
			Periodos_Gracia: 0,
			Interes: 0.25,
			Cada: Ctrl.Scales['1_M'],
			Cuota: 0,
			Primer_Pago: moment().toDate(),

		};
		Ctrl.Amortable = null;
		Ctrl.AmortableRes = null;
		Ctrl.Title = 'Nuevo Crédito';

		if(Simulate) Ctrl.Title = 'Simular Crédito';

		Ctrl.$watchCollection('Credit', function(c, o){

			Ctrl.Amortable = null;
			Ctrl.AmortableRes = null;

			if(c.Monto > 0 && c.Periodos > 0 && c.Interes > 0){
				var Cuotas = CreditoSrv.CalcCuotas(c.Monto, c.Interes, c.Cada.key, c.Periodos, c.Periodos_Gracia, c.Primer_Pago, 1);

				Ctrl.Amortable = Cuotas.Amortable;
				Ctrl.AmortableRes = Cuotas.AmortableRes;
				c.Cuota = Cuotas.Cuota;
			}

		 });

		Ctrl.ConfirmAction = function(Msg, data){
			console.info(data);
			$mdToast.showSimple(Msg);
			$mdDialog.hide(data);
		}

		Ctrl.SaveCredit = function(){
			if(Simulate) return false;

			var Daten = {
				Credit: Ctrl.Credit,
				Amortable: Ctrl.Amortable,
				AmortableRes: Ctrl.AmortableRes,
				Asociado: Asociado,
				User: myUser
			};

			$http.post('/api/Credito/Creditos/add', Daten).then(function(res){
				//Ctrl.Creditos = res.data;
				console.log('CredAdded', res.data);
				Ctrl.ConfirmAction('Crédito Creado', res.data);
				//Ctrl.ViewCredit(Ctrl.Creditos[0]); //REMOVE
			});

			
		}

	}
]);
//INICIO DEV ANGÉLICA
angular.module('ArticulomuroEditDialogCtrl', [])
.controller('ArticulomuroEditDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Upload', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Upload) {

		console.info('ArticulomuroEditDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		// debugger;
		Ctrl.Cancel = $mdDialog.cancel;
		Ctrl.contenido = '';
		Ctrl.url = '';
		Ctrl.Hide = $mdDialog.hide;

		Ctrl.organizacionesmuroseccionesCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/organizacionesmurosecciones/organizacionesmurosecciones',
			limit: 1000,
			add_append: 'refresh',
		});

/*
		if(Organizacionesmurosecciones !== undefined){
			Ctrl.Organizacionesmurosecciones = angular.copy(Organizacionesmurosecciones);
			console.log(Organizacionesmurosecciones);			
		}
*/

		Ctrl.guardarOrganizacionesmuro = () => {
			Ctrl.$parent.OrganizacionesmuroseccionesCRUD.update(Ctrl.Organizacionesmurosecciones).then(() => {
				var SeccionesCambiadas = Ctrl.SeccionesCRUD.rows.filter(s => s.changed);
				if(SeccionesCambiadas.length > 0){
					Ctrl.SeccionesCRUD.updateMultiple(SeccionesCambiadas).then(() => {
						console.log('Secciones Actualizadas');
					});
				}
			});
		}

		//INICIO DEV ANGÉLICA --> Se crea sección para las publicaciones, se envía ruta = Path llamando a Upload

		Ctrl.crearSeccion = async () => {
			const ruta = 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg';

			Ctrl.organizacionesmuroseccionesCRUD.add({
				organizacion_id: Rs.Usuario.organizacion_id,
				usuario_id: Rs.Usuario.id,
				contenido: Ctrl.contenido,
				ruta: Ctrl.file?ruta:'',
				url: Ctrl.url
			}).then(function (resp) {
				//console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
				if(Ctrl.file){ //si no hay archivo que no envíe la imagen

					Upload.upload({
						url: 'api/main/upload-imagen',
						data: {file: Ctrl.file,
							Path: ruta,
							Alto: 300, 
							Ancho: 560, 
							Quality: 90
						}
					}).then(function (resp) {
						//console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
						Ctrl.Hide();
	
					}, function (resp) {
						console.log('Error status: ' + resp.status);
						return;
					});
				}else{
					Ctrl.Hide();
				}
			}, function (resp) {
				console.log('Error status: ' + resp.status);
				return;
			});
			//Aqui falta controlar el then y la excepción
			
			
		}

		Ctrl.eliminarSeccion = (S) => {
			Rs.confirmDelete({
				Title: '¿Eliminar la Sección?',
			}).then(R => {
				if(!R) return;
				Ctrl.SeccionesCRUD.delete(S);
			});
		}
		//FIN DEV ANGÉLICA

		//INICIO DEV ANGÉLICA Carga imagen al servidor
		Ctrl.subirImagen = ($file) => {
			if(!$file) return;

			//Capturar imagen al dar clic en el boton publicar
			Ctrl.file = $file; //capturo la variable
/*
			Upload.upload({
				url: 'api/main/upload-imagen',
				data: {file: $file,
					Path: 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg',
					Ancho: 800, Alto: null, Quality: 90
				}
			}).then(function (resp) {
				console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
			}, function (resp) {
				console.log('Error status: ' + resp.status);
			});*/
		}

		//FIN DEV ANGÉLICA

	}

 
]);

//FIN DEV ANGÉLICA
angular.module('OrganizacionDiagCtrl', [])
.controller('OrganizacionDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Organizacion',
	function($scope, $rootScope, $http, $injector, $mdDialog, Organizacion) {

		console.info('OrganizacionDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Organizacion = Organizacion;
	}
]);
angular.module('UsuariosCtrl', [])
.controller('UsuariosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('UsuariosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/usuario/usuarios',
			limit: 9999,
			add_append: 'refresh',
		});
		
		Ctrl.getUsuarios = () => {
			Ctrl.UsuariosCRUD.get().then(() => {
				//Ctrl.nuevoUsuario(); //FIX
			});
		};

		Ctrl.getUsuarios();

		Ctrl.nuevoUsuario = () => {
			Ctrl.UsuariosCRUD.dialog({}, {
				title: 'Agregar Usuario',
			}).then(r => {
				Ctrl.UsuariosCRUD.add(r).then(() => {
					Rs.showToast('Usuario creado');
				});
			});
		}

		Ctrl.editarUsuario = (U) => {
			Ctrl.UsuariosCRUD.dialog(U, {
				title: 'Editar el usuario' + U.nombres
			}).then(r => {
				if(r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
				Ctrl.UsuariosCRUD.update(r).then(() => {
					Rs.showToast('Usuario actualizado');
				});
			});
		}


	}
]);
angular.module('HomeCtrl', [])
    .controller('HomeCtrl', ['$scope', '$rootScope', '$http', '$state', '$mdDialog', '$location', 'appFunctions',
        function($scope, $rootScope, $http, $state, $mdDialog, $location, appFunctions) {

            //console.info('HomeCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Logout = () => {
                let confirm = $mdDialog.confirm()
                    .title('¿Desea salir del aplicativo?')
                    .ok('Cerrar Sesion')
                    .cancel('Regresar');

                $mdDialog.show(confirm).then(() => {
                    $state.go('Login');
                });
            }


            Ctrl.obtenerSecciones = () => {
                $http.post('api/main/obtener-secciones', {}).then(r => {
                    Rs.Secciones = r.data;
                });
            }

            Ctrl.obtenerSecciones();

            //Gestion del Estado
            Rs.cambioEstado = function() {
                Rs.Estado = $state.current;
                Rs.Estado.ruta = $location.path().split('/');

                //console.log(Rs.Estado);
            };

            Rs.navegarSubseccion = (Seccion, Subseccion) => {
                $state.go('Home.Seccion.Subseccion', { seccion: Seccion, subseccion: Subseccion });
            };

            Rs.$on("$stateChangeSuccess", Rs.cambioEstado);

            Rs.cambioEstado();
        }
    ]);
angular.module('LoginCtrl', [])
.controller('LoginCtrl', ['$rootScope', '$http', '$state', '$localStorage', 
	function($rootScope, $http, $state, $localStorage){

		console.log('LoginCtrl');

		let Rs = $rootScope;

		delete $localStorage.token;

		Rs.Usuario = {
			Correo: 'info@mbrain.co',
			Password: 'kasdfjkl9r90jr'
		};

		Rs.enviarLogin = (ev) => {
			ev.preventDefault();
			
			$http.post('/api/usuario/login', { Credenciales: Rs.Usuario }).then((r) => {
				let token = r.data;
				$localStorage.token = token;
				$state.go('Home');
			});
		}

	}
]);
angular.module('MainCtrl', [])
.controller('MainCtrl', ['$rootScope', 
	function($rootScope){

		console.log('MainCtrl');

		let Rs = $rootScope;

		Rs.Saludo = 'Hola Mundo 78768';
		Rs.saludar=()=>{
			alert('Hola')
			console.log(alert);
		}
	}
]);
angular.module('FincaDiagCtrl', [])
.controller('FincaDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Finca', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Finca) {

		console.info('FincaDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Finca = Finca;
		// Ctrl.Tarea = Tarea;
		
	}
]);
angular.module('LaboresDiagCtrl', [])
.controller('LaboresDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Labor', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Labor) {

		console.info('LaboresDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Labor = Labor;
		
		
	}
]);

angular.module('TareaDiagCtrl', [])
.controller('TareaDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Tarea', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Tarea) {

		console.info('TareaDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Tarea = Tarea;
		
		
	}
]);
angular.module('ArticuloDiagCtrl', [])
    .controller('ArticuloDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('ArticuloDiagCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Salir = $mdDialog.cancel;
            Ctrl.Articulo = Articulo;

        }
    ]);
angular.module('MiTecnicoAmigoCtrl', [])
    .controller('MiTecnicoAmigoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$state',
        function($scope, $rootScope, $http, $injector, $mdDialog, $state) {

            //console.info('MiTecnicoAmigoCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Por defecto carga la subseccion Inicio (MiTecnicoAmigo) :: Luigi
            Ctrl.Subseccion = 'Inicio';
            Ctrl.PalabrasClave = [];
            Ctrl.Cancel = $mdDialog.cancel;
             //INICIO DEV ANGELICA
             Ctrl.SelectedKey = false;
             Ctrl.key = "";
             Ctrl.keys= [];
             Ctrl.ArticulosBuscados = [];
 

            $http.post('api/articulos/obtener', {}).then(
                r => {
                    Ctrl.Articulos = r.data;
                    //Inicio Dev Angélica -- seleccionar las palabras claves
                    let keys = [];

                    Ctrl.Articulos.forEach(function(articulo) {
                        if (articulo.palabras_clave) {
                            keys.push(...articulo.palabras_clave.split(","));
                        }
                    });
                    keys = keys.sort().filter(function(item, pos, ary) {
                        return !pos || item != ary[pos - 1];
                    });

                    Ctrl.PalabrasClave = keys;
                });
            //Fin Dev Angélica 

            Ctrl.abrirArticulo = (A) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.ArticuloDiag',
                    controller: 'ArticuloDiagCtrl',
                    locals: { Articulo: A },
                    fullscreen: false,
                });
            };

            //Casos :: Inicia Luigi
            // Obtener toda la información y metodos de CASOS
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
                query_with: ['novedades', 'solicitante'],
                order_by: []
            });

            Ctrl.getCasos = () => {

                //Inicio Dev Angélica
                //Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia' [ver archivo Caso.php]
                Ctrl.CasosCRUD.setScope('tipo');

                Ctrl.CasosCRUD.get();
                /*let filter = Ctrl.CasosCRUD.rows.filter(caso=>caso.tipo==='tipo');
                  console.log('Ctrl.CasosCRUD.rows', Ctrl.CasosCRUD.rows);
                  console.log('filtro', filter);*/
                //Fin Dev Angélica
            }
            Ctrl.getCasos();
            //Casos :: Finaliza Luigi

            Ctrl.crearCaso = () => {
                var OpcionesTipo = [
                    ['Tengo una Duda General', 'Consulta General'],
                    ['Necesito Ayuda Técnica', 'Apoyo Técnico'],
                    ['Quiero Contar Una Experiencia', 'Contar Experiencia']
                ];

                Rs.BasicDialog({
                    Flex: 30,
                    Title: 'Crear Nueva Solicitud',
                    Fields: [
                        { Nombre: '¿En Qué Puedo Ayudarte?', Value: 'Tengo una Duda General', Type: 'simplelist', List: OpcionesTipo.map(a => a[0]), Required: true },
                        { Nombre: 'Describe el Caso', Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
                    ],
                    Confirm: { Text: 'Crear Solicitud' },
                }).then(r => {
                    if (!r) return;

                    var NuevoCaso = {
                        titulo: r.Fields[1].Value,
                        solicitante_id: Rs.Usuario.id,
                        tipo: OpcionesTipo.find(a => a[0] == r.Fields[0].Value)[1],
                        asignados: '[]'
                    };
                    Ctrl.CasosCRUD.add(NuevoCaso);
                    Ctrl.navegarA('Solicitudes');
                });
            };

            //INICIO DEV ANGÉLICA
            //yo como usuario puedo ver todas las solicitudes o solo las mias?
            //Si entro como admin debo ver las solicitudes de todos, con un filtro--> las que si y no tienen respuesta
            //Si el usuario navega por web que no vea el boton de SMS
            Ctrl.crearCasoTelefonico = (medio) => {
                var NuevoCaso = {
                    titulo: 'Boton Contacto',
                    solicitante_id: Rs.Usuario.id,
                    tipo: medio,
                    asignados: '[]'
                };
                alert('Inicia llamado al WS')
                Ctrl.CasosCRUD.add(NuevoCaso);
            };
            //FIN DEV ANGELICA

            // Novedad Caso :: Inicia Luigi
            // Abrir el modal para la revisión y creación de novedades por Caso
            Ctrl.novedadesCaso = (C) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.MiTecnicoAmigo_SolicitudesDetalleDiag',
                    controller: 'SolicitudesDetalleCtrl',
                    locals: {
                        Caso: C
                    },
                });
            };
            // Novedad Caso :: Finaliza Luigi

            //INICIO DEV ANGÉLICA ---> Filtro de búsqueda 
            Ctrl.searchChange = function() {
                let filtro = Ctrl.filtroArticulos;
                if (!filtro) return Ctrl.Buscando = false;
                filtro = filtro.toLowerCase().replace(" de ", " ")
                    .replace(" en ", " ")
                    .replace(" para ", " ")
                    .replace(" por ", " ")
                    .replace(" la ", " ")
                    .replace(" y ", " ");

                if (filtro == "") return Ctrl.Buscando = false;

                let keys = filtro.split(" ");
                Ctrl.keys = [];//nuevo
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    keys.forEach(function(key) {
                        if (articulo.titulo.toLowerCase().indexOf(key) > 0) {
                            articulo.contador++;
                        }
                    });
                    // Recorre cada una de las palabras digitadas en el filtro
                keys.forEach(function (palabra){
                    // Separa cada una de las pabras clave del artuculo
                    let keys = articulo.palabras_clave.split(",");
                
                    // Buscamos si la palabra del filtro esta en la lista de palabras clave
                    if (keys.includes(palabra)) {
                        articulo.contador++; 
                        Ctrl.SelectedKey = true;
                        Ctrl.keys.push(palabra);
                        console.log(articulo.palabras_clave, palabra);
                    }
                });

                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                });

                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };
            //FIN DEV ANGÉLICA

            //INICIO DEV ANGÉLICA -- Search key words
            Ctrl.searchKeyWords = (key) => {
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.SelectedKey = true;
                Ctrl.key = key;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    if (articulo.palabras_clave.indexOf(key) >= 0) {
                        articulo.contador++;
                    }

                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                })

                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };

            Ctrl.cleanFilter = () => {
                Ctrl.SelectedKey = false;
                Ctrl.key = "";
                Ctrl.Buscando = false;
                Ctrl.ArticulosBuscados = [];
                Ctrl.keys = [];
            }

            //FIN DEV ANGÉLICA

            // Navegar :: Inicia Luigi
            // Metodo para navegar en opciones de Mi Tecnico Amigo
            Ctrl.navegarA = (s) => {
                $state.go('Home.Seccion.Subseccion', { subseccion: s });
            };
            // Navegar :: Finaliza Luigi
        }
    ]);

// Inicio del codigo de Luigi
angular.module('SolicitudesDetalleCtrl', [])
    .controller('SolicitudesDetalleCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {

            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);
            //console.log(Ctrl.Caso);

            // Activamos el evento Cancel, para cerrar modales
            Ctrl.Cancel = $mdDialog.cancel;

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            // Obtenemos los datos de casos, en CasosCRUD
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                    //console.log(Imagen);
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };
        }
    ]);
// Fin del codigo de Luigi
angular.module('CreditoSrv', []).factory('CreditoSrv', [
  function (){
  	var Srv = {};

  	Srv.Scales = {
		 '1_M': { key:  '1_M', Nombre: 'Mensuales',		  Meses:  1,  PeriodosAno: 12 },
		 '2_M': { key:  '2_M', Nombre: 'Bimestrales',	  Meses:  2,  PeriodosAno:  6 },	
		 '3_M': { key:  '3_M', Nombre: 'Trimestrales',	  Meses:  3,  PeriodosAno:  4 },	
		 '4_M': { key:  '4_M', Nombre: 'Cuatrimestrales', Meses:  4,  PeriodosAno:  3 },		
		 '6_M': { key:  '6_M', Nombre: 'Semestrales',	  Meses:  6,  PeriodosAno:  2 },	
		'12_M': { key: '12_M', Nombre: 'Anuales',		  Meses: 12,  PeriodosAno:  1 },
	};

	Srv.ScalesRef = {
		'Mensuales': '1_M',		
		'Bimestrales': '2_M',
		'Trimestrales': '3_M',	
		'Cuatrimestrales': '4_M',
		'Semestrales': '6_M',
		'Anuales': '12_M',
	}

  	//Funcion de calculo de cuotas
	Srv.CalcCuotas = function(Monto, Interes, Scale, Periodos, Periodos_Gracia, Primer_Pago, Start_Pago){

		var Amortable = [];
		var AmortableRes = { Capital: 0, Interes: 0, Ajuste: 0, Total: 0 };

		var Meses = Srv.Scales[Scale].Meses;
		var PeriodosAno = Srv.Scales[Scale].PeriodosAno;
		//console.log('Interes', Interes);
		var TasaPer = Math.pow( (1 + (Interes) ), (1/PeriodosAno) ) - 1;
		var Periodos_Pago = Periodos - Periodos_Gracia;
		var FacAnu = TasaPer / (1 - ( 1/ ( Math.pow( ( 1 + TasaPer ), Periodos_Pago ) )  ));
		var Fec = angular.copy(moment(Primer_Pago)); //Fecha Inicial, Hoy

		var Deuda = angular.copy(Monto);

		var CuotaPer = Math.ceil(Monto * FacAnu);

		var Cuota = 0;

		for (var i = Start_Pago; i < (Periodos+Start_Pago); i++) {
			
			Fec.add(Meses, 'M');

			var Am = {
				Num_Pago: i,
				Capital: 0,
				Interes: 0,
				Total:   0,
				Deuda:   0,
			};

			Am.Fecha = Fec.format("YYYY-MM-DD");
			Am.Interes = Math.ceil( Deuda * TasaPer );

			if(i <= Periodos_Gracia){
				Am.Total = Am.Interes;
			}else{
				Am.Total = CuotaPer;
				Am.Capital = Am.Total - Am.Interes;
				Cuota = CuotaPer;
			}

			Deuda = Deuda - Am.Capital;
			if(Deuda < 50){
				Am.Capital = Am.Capital + Deuda;
				Am.Total   = Am.Total + Deuda;
				Deuda = 0;
			}
			Am.Deuda = Deuda;

			Amortable.push(Am);

			AmortableRes.Capital += Am.Capital;
			AmortableRes.Interes += Am.Interes;
			AmortableRes.Total += Am.Total;
		}

		return {
			Amortable: Amortable,
			AmortableRes: AmortableRes,
			Cuota: Cuota,
		}
	};


	return Srv;
  }
]);
angular.module('CRUD', [])
.factory('CRUD', [ '$rootScope', '$q', '$mdDialog',
	function($rootScope, $q, $mdDialog){

		var Rs = $rootScope;

		var CRUD = function(ops) {
			var t = this;

			t.ops = {
				base_url: '',
				name: '',
				primary_key: 'id',
				ready: false,
				where: {},
				limit: 10000,
				loading: false,
				obj: null,
				only_columns: [],
				add_append: 'end',
				add_research: false,
				add_with: false,
				query_scopes: [],
				query_with: [],
				query_call: [],
				query_call_arr: [],
				order_by: [],
				selected:[],
				clear_rows: false,
			};
			t.columns = [];
			t.rows = [];

			angular.extend(t.ops, ops);

			//console.info('Crud initiated', t.ops);
			t.get_columns = () => {
				return Rs.http(t.ops.base_url, { fn: 'get_columns', ops: t.ops }).then(function(r) {
					t.columns = r.ops.columns;
				});
			};

			t.get = function(columns){
				
				if(t.ops.loading) return false;
				t.ops.loading = true;

				t.ops.only_columns = Rs.def(columns, []);
				if(t.ops.clear_rows) t.rows = [];

				return Rs.http(t.ops.base_url, { fn: 'get', ops: t.ops }).then(function(r) {
					if(r.ops){
						t.columns = r.ops.columns;
						delete r.ops.columns;
						angular.extend(t.ops, r.ops);
					};
					t.rows = r.rows;
					t.ops.loading = false;
				});
			};


			t.where = function(where){
				t.ops.where[where[0]] = where;
				return t;
			};

			t.find = function(id, main, prop){
				t.ops.find_id = id;
				return Rs.http(t.ops.base_url, { fn: 'find', ops: t.ops }, main, prop);
			};

			t.add = function(Obj){
				t.ops.obj = Obj;
				return Rs.http(t.ops.base_url, { fn: 'add', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					if(t.ops.add_append == 'end'){ t.rows.push(r); }
					else if(t.ops.add_append == 'start'){ t.rows.unshift(r); }
					else if(t.ops.add_append == 'refresh'){ t.get(); };
					return r;
				});
			};

			t.addMultiple = function(Objs){
				t.ops.obj = Objs;
				return Rs.http(t.ops.base_url, { fn: 'addmultiple', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					t.get();
					return r;
				});
			};

			t.update = function(Obj){
				t.ops.obj = Obj;
				return Rs.http(t.ops.base_url, { fn: 'update', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					Rs.updateArray(t.rows, r, t.ops.primary_key);
					return r;
				});
			};

			t.updateMultiple = function(Objs){
				t.ops.obj = Objs || angular.copy(t.ops.selected);
				return Rs.http(t.ops.base_url, { fn: 'updatemultiple', ops: t.ops }).then(function(rs) {
					angular.forEach(rs, (r) => {
						Rs.updateArray(t.rows, r, t.ops.primary_key);
					});
					t.ops.obj = null;
					t.ops.selected = [];
				});
			};

			t.delete = function(Obj){
				t.ops.obj = Obj;
				var Index = Rs.getIndex(t.rows, Obj[t.ops.primary_key], t.ops.primary_key);
				return Rs.http(t.ops.base_url, { fn: 'delete', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					t.rows.splice(Index, 1);
				});
			};

			t.deleteMultiple = function(){
				t.ops.obj = angular.copy(t.ops.selected);
				return Rs.http(t.ops.base_url, { fn: 'deletemultiple', ops: t.ops }).then(function(r) {
					angular.forEach(t.ops.obj, (Obj) => {
						var Index = Rs.getIndex(t.rows, Obj[t.ops.primary_key], t.ops.primary_key);
						t.rows.splice(Index, 1);
					});
					t.ops.obj = null;
					t.ops.selected = [];
				});
			};

			t.dialog = function(Obj, diagConfig){
				var config = {
					theme: 'default',
					title: '',
					class: 'wu400',
					controller: 'CRUDDialogCtrl',
					templateUrl: '/templates/dialogs/crud-dialog.html',
					fullscreen: false,
					clickOutsideToClose: false,
					multiple: true,
					ev: null,
					confirmText: 'Guardar',
					with_delete: true,
					delete_title: '',
					only: [],
					except:[],
					buttons: [],
				};

				angular.extend(config, diagConfig);

				return $mdDialog.show({
					controller:  config.controller,
					templateUrl: config.templateUrl,
					locals: 	{ ops : t.ops, config: config, columns: t.columns, Obj: Obj, rows: t.rows },
					clickOutsideToClose: config.clickOutsideToClose,
					fullscreen:  config.fullscreen,
					multiple: 	 config.multiple,
					targetEvent: config.ev
				});
			};

			//Poner un scope
			t.setScope = (Scope, Params) => {
				var Index = -1;
				angular.forEach(t.ops.query_scopes, ($S, $k) => {
					if($S[0] == Scope){ Index = $k; return; }
				});
				if(Index == -1){
					t.ops.query_scopes.push([ Scope, Params ]);
				}else{
					t.ops.query_scopes[Index] = [ Scope, Params ];
				};
				return t;
			};

			//Obtener un elemento por primary_key
			t.one = (key) => {
				var Index = Rs.getIndex(t.rows, key, t.ops.primary_key);
				return t.rows[Index];
			};

		};

		return {
			config: function (ops) {
				//console.log('Creating', ops);
				var DaCRUD = new CRUD(ops);
				return DaCRUD;
			}
		};
	}
]);
angular.module('Filters', [])
	.filter('to_trusted', ['$sce', function($sce){
		return function(text) {
			return $sce.trustAsHtml(text);
		};
	}])
	.filter('findId', function() {
		return function(input, id) {
			var i=0, len=input.length;
			for (; i<len; i++) {
			  if (+input[i].id == +id) {
				return input[i];
			  }
			}
			return null;
		 };
	}).filter('getIndex', function() {
		return function(input, id, attr) {
			var len=input.length;
			attr = (typeof attr !== 'undefined') ? attr : 'id';
			for (i=0; i<len; i++) {
			  if(input[i][attr] === id) {
				return i;
			  }
			}
			return null;
		 };
	}).filter('include', function() {
		return function(input, include, prop) {
			if (!angular.isArray(input)) return input;
			if (!angular.isArray(include)) include = [];
			return input.filter(function byInclude(item) {
				return include.indexOf(prop ? item[prop] : item) != -1;
			});
		};
	}).filter('exclude', function() {
		return function(input, exclude, prop) {
			if (!angular.isArray(input)) return input;
			if (!angular.isArray(exclude)) exclude = [];
			/*if (prop) {
				exclude = exclude.map(function byProp(item) {
					return item[prop];
				});
			};*/

			return input.filter(function byExclude(item) {
				return exclude.indexOf(prop ? item[prop] : item) === -1;
			});
		};
	}).filter('category', function() {
		return function(input, category, prop) {
			//console.log(input, category, prop);
			if (!angular.isArray(input)) return input;
			if(!category) return input;
			return input.filter(function(item){
				return item[prop] == category;
			});
			//return input[prop] == category;
		};
	}).filter('toArray', function () {
		return function (obj, addKey) {
			if (!angular.isObject(obj)) return obj;
			if ( addKey === false ) {
			return Object.keys(obj).map(function(key) {
				return obj[key];
			});
			} else {
			return Object.keys(obj).map(function (key) {
				var value = obj[key];
				return angular.isObject(value) ?
				Object.defineProperty(value, '$key', { enumerable: false, value: key}) :
				{ $key: key, $value: value };
			});
			}
		};
	}).filter('pluck', function() {
		return function(array, key, unique) {
			var res = new Array();
			angular.forEach(array, function(v) {
				if(unique && res.indexOf(v[key]) !== -1) return false;
				res.push(v[key]);
			});
			return res;
		};
	}).filter('switch', function() {
	    return function(input, boolean) {
	    	return (boolean) ? input : [];
	    }
	}).filter('search', function() {
		return function(input, search) {
			if (!input) return input;
			if (!search) return input;
			var expected = ('' + search).toLowerCase();
			var result = {};
			angular.forEach(input, function(value, key) {
				var actual = ('' + value).toLowerCase();
				if (actual.indexOf(expected) !== -1) {
					result[key] = value;
				}
			});
			return result;
		}
	}).filter('capitalize', function() {
	    return function(input) {
	      return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
	    }
	}).filter('capitwords', function() {
	    return function(input,limit) {
	    	if (!input) return '';
	    	input = input.split('_').join(' ');
	    	limit = (!!limit) ? limit : 2;
	    	return input.split(' ').map(function(wrd){
	    		return (wrd.length) > limit ? wrd.charAt(0).toUpperCase() + wrd.substr(1).toLowerCase() : wrd.toLowerCase();
	    	}).join(' ');
	    }
	}).filter('traducirum', function() {
	    return function(input,um) {
	    	if(input <= 0){
	    		return 'No incluido';
	    	}else if(um == 'KG'){
	    			 if(input < 1){ input = input*1000; um = 'Gramos'  }
	    		else if(input == 1){ um = 'Kilo'  }
	    		else if(input > 1 && input < 1000 ){ um = 'Kilos'  }
	    		else if(input >= 1000){ input = input/1000; um = 'Toneladas'  }
	    	}else if(um == 'LT'){
	    			 if(input < 1){ input = input*1000; um = 'Mililitros'  }
	    		else if(input == 1){ um = 'Litro'  }
	    		else if(input > 1 ){ um = 'Litros'  }
	    	}else if(um == 'UN'){
	    			 if(input <= 1){ um = 'Unidad'  }
	    		else if(input > 1 ){ um = 'Unidades'  }
	    	};
	    	return input + ' ' + um;
	    }
	}).filter('percentage', ['$filter', function ($filter) {
		return function (input, decimals) {
		return $filter('number')(input * 100, decimals) + '%';
		};
	}]).filter('numberformat', ['$filter', function ($filter) {
		return function (input, tipodato, decimales) {
			if(!input) return input;
			if(tipodato == 'Porcentaje') input = input * 100;
			var number = $filter('number')(input, decimales);
			if(tipodato == 'Porcentaje') return number + "%";
			if(tipodato == 'Moneda') return "$ " + number;
			return number;
		};
	}]).filter('splice', function() {
		return function(input, index, len) {
			if(!input) return input;
			//if(!index || !len) return input;
			return input.splice(index, len);
		};
	}).filter('getword', function() {
		return function(input, index) {
			if(!input) return input;
			var arr = input.split(' ');
			return arr[index-1];
		};
	});
//const { cloneDeep } = require("lodash");

angular.module('Articulos_ArticuloEditorCtrl', [])
    .controller('Articulos_ArticuloEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('Articulos_ArticuloEditorCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            Ctrl.keyWords = [];
            //FIN DEV ANGÉLICA

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Articulo = angular.copy(Articulo);
            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            Ctrl.keyWords = Ctrl.Articulo.palabras_clave.split(",");
            //FIN DEV ANGÉLICA

            //INCIO DEV ANGÉLICA --> Lineas productivas
		    $http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			//console.log(r.data);
		    });
		    //FIN DEV ANGÉLICA

            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/articulos/secciones',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.TiposSeccion = {
                'Parrafo': { Nombre: 'Párrafo', Icono: 'fa-align-justify' },
                'Tabla': { Nombre: 'Tabla', Icono: 'fa-table' },
                'Imagen': { Nombre: 'Imágen', Icono: 'fa-image' }
            };

            Ctrl.getSecciones = () => {
                Ctrl.SeccionesCRUD.setScope('elarticulo', Articulo.id).get();
            };

            Ctrl.getSecciones();

            Ctrl.guardarArticulo = () => {
                //INICIO DEV ANGELICA -- Actualización de palabras clave en chips
                Ctrl.Articulo.palabras_clave = Ctrl.keyWords.join();
                Ctrl.$parent.ArticulosCRUD.update(Ctrl.Articulo).then(() => {
                    var SeccionesCambiadas = Ctrl.SeccionesCRUD.rows.filter(s => s.changed);
                    if (SeccionesCambiadas.length > 0) {
                        Ctrl.SeccionesCRUD.updateMultiple(SeccionesCambiadas).then(() => {
                            console.log('Secciones Actualizadas');
                        });
                    }
                });
            }

            Ctrl.crearSeccion = async(kT) => {

                var ruta = null;
                var contenido = null;
                // Luigi :: Obtener el numero de secciones e incrementar en uno, para el indice.
                var indice = Ctrl.SeccionesCRUD.rows.length + 1;

                if (kT == 'Imagen') {
                    var Img = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600, //Ancho del canvas
                                CanvasHeight: 400, //Alto del canvas
                                CropWidth: 600, //Ancho del recorte que se subirá
                                CropHeight: 400, //Alto del recorte que se subirá
                                MinWidth: 60, //Ancho mínimo del selector
                                MinHeight: 40, //Ancho mínimo del selector
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/articulos_media/' + Articulo.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    if (Img) ruta = Img.Msg;
                }

                if (kT == 'Tabla') {
                    contenido = [
                        ['Uno', 'Dos', 'Tres'],
                        [1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9]
                    ];
                };

                Ctrl.SeccionesCRUD.add({
                    articulo_id: Articulo.id,
                    indice: indice, // Luigi :: Agregar el campo para el registro.
                    tipo: kT,
                    ruta: ruta,
                    contenido: contenido
                });
            }

            Ctrl.eliminarSeccion = (S) => {
                Rs.confirmDelete({
                    Title: '¿Eliminar la Sección?',
                }).then(R => {
                    if (!R) return;
                    Ctrl.SeccionesCRUD.delete(S)
                        .then(() => { // Luigi :: Despues de borrar, se debe reorganizar el indice de cada seccion
                            angular.forEach(Ctrl.SeccionesCRUD.rows, (S, iS) => { // Luigi :: Recorremos las secciones
                                // Luigi :: Comparamos el indice, si es diferente, se actualiza
                                if (S.indice != iS + 1) {
                                    S.indice = iS + 1;
                                    S.changed = true; // Luigi :: Marcamos el registro para el guardado.
                                }
                            });
                            // Luigi :: Enviamos a guardar los datos modificados.
                            Ctrl.guardarArticulo();
                        });
                });
            };

            //Seccion Tabla
            Ctrl.agregarColumna = (S) => {
                var Tabla = S.contenido;
                angular.forEach(Tabla, (Fila) => {
                    Fila.push('');
                });
                S.changed = true;
            }

            Ctrl.eliminarColumna = (S, kC) => {
                var Tabla = angular.copy(S.contenido);
                angular.forEach(Tabla, (Fila) => {
                    Fila.splice(kC, 1);
                });
                S.contenido = Tabla;
                S.changed = true;
            }

            Ctrl.agregarFila = (S) => {
                var Tabla = S.contenido;
                var NuevaFila = angular.copy(Tabla[0]);
                NuevaFila = NuevaFila.map(V => { return null });

                Tabla.push(NuevaFila);
                S.changed = true;
            }

            Ctrl.eliminarFila = (S, kR) => {
                var Tabla = S.contenido;
                Tabla.splice(kR, 1);
                S.changed = true;
            }

            // Luigi :: Funcion para mover el indice, aumentar o decrementar.
            Ctrl.moverSeccion = (S, n) => {
                // Luigi :: declaramos variables para almacenar valores necesarios en el proceso.
                var nuevoIndice = S.indice + n;
                var elementoObjetivo;
                // Luigi :: Ciclo para validar el numero de indice
                for (let i = 0; i < Ctrl.SeccionesCRUD.rows.length; i++) {
                    if (Ctrl.SeccionesCRUD.rows[i].indice == nuevoIndice)
                        elementoObjetivo = Ctrl.SeccionesCRUD.rows[i];
                }
                // Luigi :: Si el elemenoObjetivo no existe, salimos.
                if (!elementoObjetivo)
                    return;

                // Luigi :: Almacenamos el valor del nuevo indice.
                S.indice = nuevoIndice;
                elementoObjetivo.indice = nuevoIndice - n;
                // Luigi :: Guardamos todos los registros modificados.
                S.changed = true;
                elementoObjetivo.changed = true;
            };


        }
    ]);
angular.module('ArticulosCtrl', [])
.controller('ArticulosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('ArticulosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.ArticulosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/articulos/articulos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'autor' ],
			order_by: [ '-created_at' ]
		});

		Ctrl.getArticulos = () => {
			Ctrl.ArticulosCRUD.get().then(() => {
				//Ctrl.editarArticulo(Ctrl.ArticulosCRUD.rows[0]);
			});
		};

		Ctrl.getArticulos();

		Ctrl.nuevoArticulo = () => {

			Ctrl.ArticulosCRUD.dialog({
				usuario_id: Rs.Usuario.id,
				estado: 'Borrador'
			}, {
				title: 'Nuevo Articulo',
				only: ['titulo']
			}).then(r => {
				if(!r) return;
				Ctrl.ArticulosCRUD.add(r);
			});

		};


		Ctrl.editarArticulo = (A) => {
			$mdDialog.show({
				templateUrl: 'Frag/AdministracionGeneral.Articulos_ArticuloEditorDiag',
				controller: 'Articulos_ArticuloEditorCtrl',
				locals: { Articulo: A },
				scope: Ctrl.$new()
			});
		}


	}
]);
angular.module('Casos_CasoEditorCtrl', [])
    .controller('Casos_CasoEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('Casos_CasoEditorCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Caso = angular.copy(Caso);

            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/Novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }
            Ctrl.getCasos();

        }
    ]);
// Inicio del codigo de Luigi
angular.module('Casos_NovedadesCtrl', [])
    .controller('Casos_NovedadesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {

            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                    //console.log(Imagen);
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };

        }
    ]);
// Fin del codigo de Luigi
angular.module("CasosCtrl", []).controller("CasosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("CasosCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        var TiposCasos = [
            "Consulta General",
            "Apoyo Técnico",
            "Contar Experiencia"
        ];

        Ctrl.CasosCRUD = $injector.get("CRUD").config({
            base_url: "/api/casos/casos",
            limit: 1000,
            add_append: "refresh",
            query_with: ["solicitante"],
            order_by: ["-created_at"]
        });
        //Inicio Dev Angélica
        //Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia'[ver archivo Caso.php]
        Ctrl.CasosCRUD.setScope("tipo");
        //Fin Dev Angélica

        Ctrl.UsuariosCRUD = $injector
            .get("CRUD")
            .config({ base_url: "/api/usuario/usuarios" });

        Ctrl.getCasos = () => {
            Promise.all([Ctrl.UsuariosCRUD.get()]).then(() => {
                Ctrl.CasosCRUD.get().then(() => {
                    //Ctrl.novedadesCaso(Ctrl.CasosCRUD.rows[1]);
                });
            });
        };

        Ctrl.getCasos();

        Ctrl.nuevoCaso = () => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: null,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombre"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: TiposCasos[0],
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: "",
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var NuevoCaso = {
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.add(NuevoCaso);
            });
        };

        Ctrl.editarCaso = C => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: C.solicitante_id,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombre"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: C.tipo,
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: C.titulo,
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var CasoEditado = {
                    id: C.id,
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.update(CasoEditado).then(() => {
                    Ctrl.CasosCRUD.get();
                    Rs.showToast("Caso actualizado");
                });
            });
        };

        Ctrl.eliminarCaso = C => {
            Rs.confirmDelete({
                Title: "¿Eliminar el caso #" + C.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.CasosCRUD.delete(C);
            });
        };

        // Inicia codigo Luigi
        Ctrl.novedadesCaso = C => {
            $mdDialog.show({
                templateUrl: "Frag/AdministracionGeneral.Casos_NovedadesDiag",
                controller: "Casos_NovedadesCtrl",
                locals: {
                    Caso: C
                }
            });
        };
        // Finaliza codigo Luigi
    }
]);

//INICIO DEV ANGELICA
angular.module('ContactoCtrl', [])
.controller('ContactoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('ContactoCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		var TiposCasos = ['Whatsapp', 'SMS', 'Llamada telefonica'];

		Ctrl.ContactoCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/casos/casos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'solicitante' ],
			order_by: [ '-created_at' ]
		});

		//Inicio Dev Angélica
		//Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia'[ver archivo Caso.php]
		Ctrl.ContactoCRUD.setScope('tipocontacto');
		//Fin Dev Angélica

		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ base_url: '/api/usuario/usuarios' });


		Ctrl.getCasos = () => {
			Promise.all([
				Ctrl.UsuariosCRUD.get()
			]).then(() => {
				Ctrl.ContactoCRUD.get().then(() => {
					//Ctrl.editarArticulo(Ctrl.CasosCRUD.rows[1]);
				});
			});
			
			
		};

		Ctrl.getCasos();

		Ctrl.nuevoContacto = () => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Crear Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',  Value: null, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso', Value: TiposCasos[0], Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso',       Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Crear Contacto' },
			}).then(r => {
				if(!r) return;

				var NuevoContacto = {
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.add(NuevoContacto);
			});

		};


		Ctrl.editarContacto = (C) => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Editar Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',         Value: C.solicitante_id, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso',     Value: C.tipo, Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso', Value: C.titulo, Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Editar Contacto' },
			}).then(r => {
				if(!r) return;

				var ContactoEditado = {
					id: C.id,
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.update(ContactoEditado).then(() => {
					Ctrl.ContactoCRUD.get();
				});
				
			});

		}

		Ctrl.eliminarContacto = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar el contacto #'+C.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.ContactoCRUD.delete(C);
			});
		}
	}
]);
//FIN DEV ANGELICA
angular.module("FincasCtrl", []).controller("FincasCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("FincasCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        var TiposSuelo = [
             "UNIDAD AMAGÁ",
             "UNIDAD ARMENIA",
             "UNIDAD CASCARERO",
             "UNIDAD CARTAGENITA",
             "UNIDAD CINCHO",
             "UNIDAD CHANCHÓN",
             "UNIDAD CHINCHINÁ",
             "UNIDAD CHUSCAL",
             "UNIDAD DOÑA JUANA",
             "UNIDAD DOSCIENTOS",
             "UNIDAD EL PALMAR",
             "UNIDAD FONDESA",
             "UNIDAD FRESNO",
             "UNIDAD GUADALUPE",
             "UNIDAD LA MONTAÑA",
             "UNIDAD LIBANO",
             "UNIDAD LLANO DE PALMAS",
             "UNIDAD MALABAR",
             "UNIDAD MONTENEGRO",
             "UNIDAD NORTE",
             "UNIDAD PERIJÁ",
             "UNIDAD PAUJIL",
             "UNIDAD PIENDAMÓ",
             "UNIDAD QUINDÍO",
             "UNIDAD ROPERO",
             "UNIDAD SALGAR",
             "UNIDAD SAN SIMÓN",
             "UNIDAD SUÁREZ",
             "UNIDAD SUROESTE",
             "UNIDAD TABLAZO",
             "UNIDAD TIMBÍO",
             "UNIDAD VENECIA",
             "UNIDAD VILLETA",             
        ];

        var TiposCultivo  = [
            "MONOCULTIVO",
            "ASOCIADO",
        ];

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.FincasCRUD = $injector.get("CRUD").config({
            base_url: "/api/fincas/fincas",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getFinca = () => {
            // Ctrl.FincasCRUD.setScope("id", Rs.Usuario.finca_id); //Me trae las fincas del usuario
            Ctrl.FincasCRUD.get().then(() => {
                Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                //Ctrl.editarFinca(Ctrl.FincasCRUD.rows[0]);
            });
        };

        Ctrl.getFinca();

        Ctrl.nuevaFinca = () => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Finca",
                Fields: [
                    {
                        Nombre: "Usuario",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Nombre",
                        Value: "",
                        Type: "string",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Dirección",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Departamento",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Municipio",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Área total",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Total de lotes",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Tipo de cultivo",
                        Value: TiposCultivo[0],
                        Type: "simplelist",
                        List: TiposCultivo,
                        Required: true
                    },
                    
                    {
                        Nombre: "Tipo de Suelo",
                        Value: TiposSuelo[0],
                        Type: "simplelist",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Zona",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Latitud",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Longitud",
                        Value: "",
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Hectareas",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Sitios",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Temperatura (C°):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Humedad Relativa (%):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Precipitacion (Mm):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Minima (Mt):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Maxima (Mt):",
                        Value: "",
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Brillo Solar (H):",
                        Value: "",
                        Type: "string",
                        Required: true
                    }
                ],

                Confirm: { Text: "Crear Finca" }
            }).then(r => {
                if (!r) return;
                var nuevaFinca = {
                    usuario_id : r.Fields[0].Value,
                    nombre: r.Fields[1].Value,
                    direccion: r.Fields[2].Value,
                    departamento_id: r.Fields[3].Value,
                    municipio_id: r.Fields[4].Value,
                    area_total: r.Fields[5].Value,
                    total_lotes: r.Fields[6].Value,
                    tipo_cultivo: r.Fields[7].Value,
                    tipo_suelo: r.Fields[8].Value,
                    zona_id : r.Fields[9].Value,
                    latitud: r.Fields[10].Value,
                    longitud: r.Fields[11].Value,
                    hectareas: r.Fields[12].Value,
                    sitios: r.Fields[13].Value,
                    temperatura: r.Fields[14].Value,
                    humedad_relativa: r.Fields[15].Value,
                    precipitacion: r.Fields[16].Value,
                    altimetria_min: r.Fields[17].Value,
                    altimetria_max: r.Fields[18].Value,
                    brillo_solar: r.Fields[19].Value,

                };
                Ctrl.FincasCRUD.add(nuevaFinca);
            });
        };

        Ctrl.editarFinca = F => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Editar Finca",
                Fields: [
                    {
                        Nombre: "Usuario",
                        Value: F.usuario_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Nombre",
                        Value: F.nombre,
                        Type: "string",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Dirección",
                        Value: F.direccion,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Departamento",
                        Value: F.departamento_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Municipio",
                        Value: F.municipio_id,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Área total",
                        Value: F.area_total,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Total de lotes",
                        Value: F.total_lotes,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Tipo de cultivo",
                        Value: TiposCultivo[0],
                        Type: "simplelist",
                        List: TiposCultivo,
                        Required: true
                    },
                    
                    {
                        Nombre: "Tipo de Suelo",
                        Value: TiposSuelo[0],
                        Type: "simplelist",
                        List: TiposSuelo,
                        Required: true
                    },
                    {
                        Nombre: "Zona",
                        Value: F.zona_id,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Latitud",
                        Value: F.latitud,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Longitud",
                        Value: F.longitud,
                        TType: "string",
                        Required: true
                    },
                    {
                        Nombre: "Hectareas",
                        Value: F.hectareas,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Sitios",
                        Value: F.sitios,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Temperatura (C°):",
                        Value: F.temperatura,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Humedad Relativa (%):",
                        Value: F.humedad_relativa,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Precipitacion Mm:",
                        Value: F.precipitacion,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Minima (Mt):",
                        Value: F.altimetria_min,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Altimetria Maxima (Mt):",
                        Value: F.altimetria_max,
                        Type: "string",
                        Required: true
                    },
                    {
                        Nombre: "Brillo Solar (H):",
                        Value: F.brillo_solar,
                        Type: "string",
                        Required: true
                    }
                ],

                Confirm: { Text: "Guardar" }
            }).then(r => {
                if (!r) return;
                var FincaEditada = {
                    id: F.id,
                    usuario_id : r.Fields[0].Value,
                    nombre: r.Fields[1].Value,
                    direccion: r.Fields[2].Value,
                    departamento_id: r.Fields[3].Value,
                    municipio_id: r.Fields[4].Value,
                    area_total: r.Fields[5].Value,
                    total_lotes: r.Fields[6].Value,
                    tipo_cultivo: r.Fields[7].Value,
                    tipo_suelo: r.Fields[8].Value,
                    zona_id : r.Fields[9].Value,
                    latitud: r.Fields[10].Value,
                    longitud: r.Fields[11].Value,
                    hectareas: r.Fields[12].Value,
                    sitios: r.Fields[13].Value,
                    temperatura: r.Fields[14].Value,
                    humedad_relativa: r.Fields[15].Value,
                    precipitacion: r.Fields[16].Value,
                    altimetria_min: r.Fields[17].Value,
                    altimetria_max: r.Fields[18].Value,
                    brillo_solar: r.Fields[19].Value,

                };

            // Ctrl.FincasCRUD.dialog(F, {
            //     title: "Editar Finca" + F.nombre
            // }).then(r => {
            //     if (r == "DELETE") return Ctrl.FincasCRUD.delete(F);
                Ctrl.FincasCRUD.update(FincaEditada).then(() => {
                    Rs.showToast("Finca actualizada");
                });
            });
        };

        Ctrl.eliminarFinca = F => {
            Rs.confirmDelete({
                Title: "¿Eliminar Finca #" + F.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.FincasCRUD.delete(F);
            });
        };

        // $http.post("api/fincas/obtener", {}).then(r => {
        //     Ctrl.Fincas = r.data;
        //     Ctrl.abrirFinca(Ctrl.Fincas[3]); //FIX
        // });

        Ctrl.abrirFinca = F => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.FincaDiag",
                controller: "FincaDiagCtrl",
                locals: { Finca: F },
                fullscreen: false
            });
        };

        Ctrl.abrirOrganizacion = O => {
            $mdDialog.show({
                templateUrl: "Frag/GestionOrganizacion.Organizacion",
                controller: "FincasCtrl",
                locals: { Finca: O },
                fullscreen: false
            });
        };

        //Prueba de Lista
        $http
            .post("api/main/obtener-lista", {
                Lista: "Departamentos",
                op1: "COL"
            })
            .then(r => {
                console.log(r.data);
            });

        // LOTES
        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.get().then(() => {
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getLotes();

        // //Prueba de Mapa
        // $http.post('map.html').then(r => {
        //     Ctrl.mapa = r.data;
        // });

        Ctrl.nuevoLote = () => {
            Ctrl.LotesCRUD.dialog({
                Flex: 10,
                Title: "Crear Lote",

                Confirm: { Text: "Crear Lote" }
            }).then(r => {
                if (!r) return;
                Ctrl.LotesCRUD.add(r);
            });
        };

        Ctrl.editarLote = L => {
            Ctrl.LotesCRUD.dialog(L, {
                title: "Editar Lote" + L.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.LotesCRUD.delete(L);
                Ctrl.LotesCRUD.update(r).then(() => {
                    Rs.showToast("Lote actualizado");
                });
            });
        };

        Ctrl.eliminarLote = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LotesCRUD.delete(L);
            });
        };

        Ctrl.abrirLabores = L => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.LaboresDiag",
                controller: "LaboresDiagCtrl",
                locals: { Labor: L },
                fullscreen: false
            });
        };
        
    }
]);

angular.module("LaboresCtrl", []).controller("LaboresCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("LaboresCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;
        

        Ctrl.zona_select = null;
        Ctrl.linea_lp_select = null;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.LaboresCRUD = $injector.get("CRUD").config({
            base_url: "/api/labores/labores",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['zona']
        });

        Ctrl.getLabores = () => {
            console.log(Ctrl.zona_select);
            console.log(Ctrl.linea_lp_select);
            Ctrl.LaboresCRUD.setScope('lazona', Ctrl.zona_select);
            Ctrl.LaboresCRUD.setScope('lalineaproductiva', Ctrl.linea_lp_select);
            
            Ctrl.LaboresCRUD.get().then(() => {
                               
            });
        };

        // $scope.update = function() {
        //     // Ctrl.LaboresCRUD.setScope('lazona', Rs.Labor.zona_id);
        //     $scope.item.size.code = $scope.selectedItem.code
        //     // use $scope.selectedItem.code and $scope.selectedItem.name here
        //  }

       
        // Ctrl.getLabor();

        // Ctrl.nuevaLabor = () => {
        //     Ctrl.LaboresCRUD.dialog({
        //         Flex: 10,
        //         Title: "Crear Labor",
        //         Confirm: { Text: "Crear Labor" }
        //     }).then(r => {
        //         if (!r) return;
        //         Ctrl.LaboresCRUD.add(r);
        //     });
        // };
// 
Ctrl.nuevaLabor = () => {
    Rs.BasicDialog({
        Flex: 30,
        Title: "Crear Labor",
        Fields: [
            
            {
                Nombre: "Labor",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Zona",
                Value: Ctrl.zona_select,
                Type: "string",
                // List: zona_select,
                Required: true
            },
            {
                Nombre: "Linea Productiva",
                Value: Ctrl.linea_lp_select,
                Type: "string",
                // List: zona_select,
                Required: true
            },
            {
                Nombre: "Frecuencia",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Semana iInicio",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Margen",
                Value: "",
                Type: "string",
                Required: true
            }
        ],

        Confirm: { Text: "Crear Labor" }
    }).then(r => {
        if (!r) return;
        var nuevaLabor = {
            labor : r.Fields[0].Value,
            zona_id: r.Fields[1].Value,
            linea_productiva_id: r.Fields[2].Value,
            frecuencia: r.Fields[3].Value,
            semana_inicio: r.Fields[4].Value,
            margen: r.Fields[5].Value,
            

        };
        Ctrl.LaboresCRUD.add(nuevaLabor);
    });
};

// 
        
        Ctrl.editarLabor = (L) => {
            console.log(L);
			$mdDialog.show( { 
				templateUrl: 'Frag/AdministracionGeneral.Labores_LaborEditorDiag',
				controller: 'Labores_LaborEditorCtrl',
				locals: { Labor: L },
				scope: Ctrl.$new()
			});
		}

        Ctrl.eliminarLabor = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Labor #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LaboresCRUD.delete(L);
            });
        };

        Ctrl.obtener_lp = () =>{
            return $http.post('api/lineasproductivas/obtener', {}).then(r => {
                Ctrl.lineas_productivas = r.data;
                Ctrl.linea_lp_select = Ctrl.lineas_productivas[0].id;
                
            });

        }
        Ctrl.obtener_zonas = ()=>{
            return $http.post('api/zonas/obtener', {}).then(r => {
                Ctrl.zonas = r.data;
                Ctrl.zona_select = Ctrl.zonas[0].id;
                
            });
        }

        Promise.all([
            Ctrl.obtener_lp(),
            Ctrl.obtener_zonas()
        ]).then(() => {
            Ctrl.getLabores();
        });
	
    }
]);

angular.module('LineasProductivasCtrl', [])
    .controller('LineasProductivasCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            //console.info('LineasProductivasCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.LineasProductivasCRUD = $injector.get('CRUD').config({
                base_url: '/api/lineasproductivas/lineasproductivas',
                limit: 1000,
                add_append: 'refresh',
            });
            //console.log(Ctrl.LineasProductivasCRUD);

            Ctrl.getLineasProductivas = () => {
                Ctrl.LineasProductivasCRUD.get().then(() => {});
                //Ctrl.nuevo();
            };

            Ctrl.getLineasProductivas();

            Ctrl.nuevo = () => {
                Ctrl.LineasProductivasCRUD.dialog({}, {
                    title: 'Agregar Linea Productiva'
                }).then(lp => {
                    Ctrl.LineasProductivasCRUD.add(lp)
                        .then(() => {
                            Rs.showToast('Linea productiva creada')
                        });
                });
            }

            Ctrl.editar = (LP) => {
                Ctrl.LineasProductivasCRUD.dialog(LP, {
                    title: 'Editar Linea Productiva ' + LP.nombre
                }).then(dato => {
                    if (dato == 'DELETE')
                        return Ctrl.LineasProductivasCRUD.delete(LP);
                    //console.log(dato);
                    Ctrl.LineasProductivasCRUD.update(dato)
                        .then(() => {
                            Rs.showToast('Linea productiva actualizada')
                        });
                });
            };

            Ctrl.guardarLP = (LP) => {
                Ctrl.LineasProductivasCRUD.update(LP);
            }

            Ctrl.cargarImagen = async(LP) => {
                //console.log('id ' + LP.id);
                var Imagen = await $mdDialog.show({
                    templateUrl: 'templates/dialogs/image-editor.html',
                    controller: 'ImageEditor_DialogCtrl',
                    multiple: true,
                    locals: {
                        Config: {
                            Theme: 'default',
                            CanvasWidth: 200,
                            CanvasHeight: 200,
                            CropWidth: 200,
                            CropHeight: 200,
                            MinWidth: 50,
                            MinHeight: 50,
                            KeepAspect: true,
                            Preview: false,
                            Daten: {
                                Path: 'files/lineasproductivas_media/' + LP.id + '.jpg'
                            }
                        }
                    }
                });
            };
        }

    ]);
angular.module('Organizaciones_OrganizacionEditorCtrl', [])
.controller('Organizaciones_OrganizacionEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
	function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

		console.info('Organizaciones_OrganizacionEditorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Caso = angular.copy(Caso);

		Ctrl.SeccionesCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/organizaciones/secciones',
			limit: 1000,
			add_append: 'refresh',
		});

		Ctrl.getSecciones = () => {
			Ctrl.SeccionesCRUD.setScope('laorganizacion', Organizacion.id).get();
		}
		Ctrl.getOrganizaciones();

	}
]);
angular.module("OrganizacionesCtrl", []).controller("OrganizacionesCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    "Upload",  //DEV ANGÉLICA --> 
    function($scope, $rootScope, $http, $injector, $mdDialog, Upload) {
        console.info("OrganizacionesCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        Ctrl.Salir = $mdDialog.cancel;
		
        Ctrl.OrganizacionesCRUD = $injector.get("CRUD").config({
            
            base_url: "/api/organizaciones/organizaciones",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.myHTML =
        'I am an <code>HTML</code>string with ' +
        '<a href="#">links!</a> and other <em>stuff</em>';
        
        //INICIO DEV ANGÉLICA -- MURO
        Ctrl.OrganizacionesmuroseccionesCRUD = $injector.get('CRUD').config({ 
            base_url: '/api/organizacionesmurosecciones/organizacionesmurosecciones',
            limit: 1000,
			add_append: 'refresh',
            query_with: ['usuario'],
			order_by: [ '-created_at' ]
		});
        console.log(Ctrl.OrganizacionesmuroseccionesCRUD);

        Ctrl.obtenerSecciones = (organizacion_id) => {
            // console.log('nos mostrara algo?');
            // console.log(Ctrl.OrganizacionesCRUD);
            Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', organizacion_id).get();
		};
        //console.log(Ctrl.obtenerSecciones);

        //console.log(Ctrl.OrganizacionesmuroseccionesCRUD);

        //FIN DEV ANGÉLICA

        Ctrl.getOrganizacion = () => {
            // Ctrl.OrganizacionesCRUD.setScope('id', Rs.Usuario.organizacion_id); //Me trae las organizaciones por usuario
            Ctrl.OrganizacionesCRUD.get().then(() => {
                Ctrl.Organizacion = Ctrl.OrganizacionesCRUD.rows[0];
                Ctrl.obtenerSecciones(Ctrl.Organizacion.id);
                //Ctrl.editarOrganizacion(Ctrl.OrganizacionesCRUD.rows[0]);
            });
        };

        Ctrl.getOrganizacion();

        Ctrl.nuevaOrganizacion = () => {
            Ctrl.OrganizacionesCRUD.dialog({
                Flex: 10,
				Title: 'Crear Organización',
				
				Confirm: { Text: 'Crear Organizacion' },
            }).then(r => {
                if (!r) return;
                Ctrl.OrganizacionesCRUD.add(r);
            });
        };

        Ctrl.editarOrganizacion = (O) => {
			Ctrl.OrganizacionesCRUD.dialog(O, {
				title: 'Editar Organización' + O.nombre
			}).then(r => {
				if(r == 'DELETE') return Ctrl.OrganizacionesCRUD.delete(O);
				Ctrl.OrganizacionesCRUD.update(r).then(() => {
					Rs.showToast('Organizacion actualizada');
				});
			});
		}

		Ctrl.eliminarOrganizacion = (O) => {
			Rs.confirmDelete({
				Title: '¿Eliminar Organizacion #'+O.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.OrganizacionesCRUD.delete(O);
			});
        }

        //INICIO DEV ANGÉLICA

        /*Ctrl.abrirMuroDialog = () => {
            //console.log('es el caso ' + C.id);
            $mdDialog.show({
                templateUrl: 'Frag/GestionOrganizacion.OrganigramaDiag',
                //templateUrl: 'Frag/GestionOrganizacion.',
                controller: 'OrganizacionDiagCtrl',
                locals: {
                },
                //scope: Ctrl.$update()
            });
        };*/


        //FIN DEV ANGÉLICA

        //Abre el modal de publicaciones del muro 

		Ctrl.abrirOrganigrama = (O) => {
            // console.log(O);
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganigramaDiag',
				controller: 'OrganizacionDiagCtrl',
				locals: { Organizacion: O },
				fullscreen: false,
			});
        }


    //INICIO DEV ANGÉLICA 
        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.abrirArticulomuro = (A) => {
            console.log(A);
			$mdDialog.show({
				//templateUrl: 'Frag/GestionOrganizacion.OrganizacionesmuroEditorDiag',
                templateUrl: 'templates/dialogs/image-editor.html',               
				controller: 'ImageEditor_DialogCtrl',
				locals: {Organizacionesmurosecciones: A},
			});
        }

                //Carga imagen al servidor
                Ctrl.subirImagen = ($file) => {
                    if(!$file) return;
        
                    Upload.upload({
                        url: 'api/main/upload-imagen',
                        data: {file: $file,
                            Path: 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg',
                            Ancho: 560, Alto: 300, Quality: 90
                        }
                    }).then(function (resp) {
                        console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
                    }, function (resp) {
                        console.log('Error status: ' + resp.status);
                    });
                }
        
            
        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.nuevoArticuloMuro = (O) => {
            console.log(O);
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganizacionesmuroEditorDiag',
				controller: 'ArticulomuroEditDialogCtrl',
				locals: {  },
				fullscreen: false,
			}).then(function (resp) {
                Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', Rs.Usuario.organizacion_id).get();
            }, function (resp) {
                console.log('Error status: ' + resp.status); 
            });

        }

        // Creamos listado de Tipo de novedad
        Ctrl.TipoNovedad = {
            'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
            'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
        }

        Ctrl.DarFormatoFecha = (fecha) => {
            debugger;
            const dias = fecha.diff(now(), 'days');

            debugger;
            if (dias === 0) {
                return 'Publicado hoy';
            } else {
                if (dias > 30) {
                    return'Publicado hace ' + dias / 30 + ' meses';
                } else {
                    return'Publicado hace ' + dias + ' dias';
                }
            }
        }

        Ctrl.Update = () => {
            alert("Update");
        }
    //FIN DEV ANGÉLICA

    }
]);




angular.module('PerfilesCtrl', [])
    .controller('PerfilesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            //console.info('PerfilesCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Obtener la información de los perfiles existentes.
            Ctrl.PerfilesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/perfiles',
                limit: 100,
                add_append: 'refresh',
            });
            Ctrl.getPerfiles = () => {
                Ctrl.PerfilesCRUD.get().then(() => {
                    Ctrl.abrirPerfil(Ctrl.PerfilesCRUD.rows[0]);
                });
            };

            Ctrl.PerfilesSeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/secciones',
                limit: 100,
                add_append: 'refresh',
                order_by: ['seccion_id']
            });
            Ctrl.getPerfilesSeccion = () => {
                Ctrl.PerfilesSeccionesCRUD.get().then(() => {});
            };

            // Ejecutar el metodo para cargar los registros al controlador
            // Ctrl.getPerfiles();

            // Obtener la información de las secciones existentes.
            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/secciones/secciones',
                // base_url: '/api/secciones/seccionesPerfil',
                limit: 100,
                add_append: 'refresh',
                //order_by: ['seccion']
            });
            Ctrl.getSecciones = () => {
                return Ctrl.SeccionesCRUD.get().then(() => {
                    var secciones = {};
                    Ctrl.SeccionesCRUD.rows.forEach(S => {
                        secciones[S.id] = S;
                    });
                    Ctrl.secciones = secciones;
                });
            };

            // Ejecutar el metodo para cargar los registros al controlador
            Ctrl.getSecciones().then(Ctrl.getPerfiles());

            // Crear arreglo
            Ctrl.nivelesSeguridad = [
                { 'nivel': 0, 'etiqueta': 'Sin acceso', 'icono': 'fa-lock' },
                { 'nivel': 10, 'etiqueta': 'Visualización', 'icono': 'fa-eye' },
                { 'nivel': 20, 'etiqueta': 'Adición', 'icono': 'fa-plus' },
                { 'nivel': 30, 'etiqueta': 'Edición', 'icono': 'fa-pen' },
                { 'nivel': 40, 'etiqueta': 'Borrado', 'icono': 'fa-trash' },
                { 'nivel': 50, 'etiqueta': 'Control Total', 'icono': 'fa-hdd' },
            ];

            // Función para cargar las secciones segun el perfil seleccionado.
            Ctrl.abrirPerfil = (P) => {
                Ctrl.perfilSel = P;

                Ctrl.PerfilesSeccionesCRUD.setScope('perfil', P.id).get().then(() => {
                    angular.forEach(Ctrl.secciones, S => {
                        S.nivel = 0;
                    });
                    angular.forEach(Ctrl.PerfilesSeccionesCRUD.rows, PS => {
                        Ctrl.secciones[PS.seccion_id].nivel = PS.nivel;
                    });
                });

            };

            Ctrl.guardarPermisos = () => {
                $http.post('api/perfiles/guardar-permisos', {
                    'perfil_id': Ctrl.perfilSel.id,
                    'secciones': Ctrl.secciones
                });
            };
        }
    ]);
angular.module('UsuariosCtrl', [])
    .controller('UsuariosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            //console.info('UsuariosCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope; 

            // Obtener la configuración de CRUD con los datos para Usuarios
            Ctrl.UsuariosCRUD = $injector.get('CRUD').config({
                base_url: '/api/usuario/usuarios',
                limit: 100,
                add_append: 'refresh',
                query_with: ['perfil'],
            });
            Ctrl.getUsuarios = () => {
                Ctrl.UsuariosCRUD.setScope('laorganizacion', Rs.Usuario.organizacion_id);
                Ctrl.UsuariosCRUD.get().then(() => {});
            };
            Ctrl.getUsuarios();

            // Método para el modal de nuevo registro.
            Ctrl.nuevo = () => {
                Ctrl.UsuariosCRUD.dialog({ 
                    tipo_documento: 'CC', 
                    organizacion_id: Rs.Usuario.organizacion_id,
                }, {
                    title: 'Agregar Usuario',
                    except: [
                        'finca_id',
                        'organizacion_id',
                    ],
                }).then(U => {
                    // Retornamos a la pagina principal, si se cancela el modal de NUEVO.
                    if ( !U ) return;
                    Ctrl.UsuariosCRUD.add(U)
                        .then(() => {
                            Rs.showToast('Usuario creado');
                        });
                });
            };

            // Modal para la edición de usuarios
            Ctrl.editarUsuario = (U) => {
                Ctrl.UsuariosCRUD.dialog(U, {
                    title: `Editar usuario: ${ U.nombres } ${ U.apellidos }`,
                    except: [
                        'contrasena',
                        'finca_id',
                        'organizacion_id',
                    ],
                }).then(r => {
                    if ( !r ) return;
                    if(r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
                    Ctrl.UsuariosCRUD.update(r).then(() => {
                        Ctrl.UsuariosCRUD.get();
                        Rs.showToast(`Usuario ${ U.nombres } actualizado`);
                    });
                });
            }; 

            // Modal para la modificación de la clave de acceso
            Ctrl.claveUsuario = (U) => {
                Ctrl.UsuariosCRUD.dialog(U, {
                    title: `Editar usuario: ${ U.nombres } ${ U.apellidos }`,
                    only: [
                        'contrasena',
                    ],
                }).then(r => {
                    if ( !r ) return;
                    if(r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
                    Ctrl.UsuariosCRUD.update(r).then(() => {
                        Ctrl.UsuariosCRUD.get();
                        Rs.showToast(`Usuario ${ U.nombres } actualizado`);
                    });
                });
            };
        }

    ]);
angular.module("ZonasCtrl", []).controller("ZonasCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        console.info("ZonasCtrl");
        var Ctrl = $scope;
        var Rs = $rootScope;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.ZonasCRUD = $injector.get("CRUD").config({
            base_url: "/api/zonas/zonas",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"]
        });

        Ctrl.getZona = () => {
            // Ctrl.ZonasCRUD.setScope('id', Rs.Usuario.Zona_id);
            Ctrl.ZonasCRUD.get().then(() => {
                Ctrl.Zona = Ctrl.ZonasCRUD.rows[0];
                //Ctrl.editarZona(Ctrl.ZonasCRUD.rows[0]);
            });
        };

        Ctrl.getZonas = () => {
            Ctrl.ZonasCRUD.get().then(() => {});
            //Ctrl.nuevo();
        };

        Ctrl.getZona();

        Ctrl.nuevaZona = () => {
            Ctrl.ZonasCRUD.dialog({
                Flex: 10,
                Title: "Crear Zona",
                Confirm: { Text: "Crear Zona" }
            }).then(r => {
                if (!r) return;
                Ctrl.ZonasCRUD.add(r);
            });
        };

        Ctrl.editarZona = (Z) => {
            console.log(Z);
			$mdDialog.show( {
				templateUrl: 'Frag/AdministracionGeneral.Zonas_ZonaEditorDiag',
				controller: 'Zonas_ZonaEditorCtrl',
				locals: { Zona: Z },
				scope: Ctrl.$new()
			});
		}


        // Ctrl.editarZona = Z => {
        //     Ctrl.ZonasCRUD.dialog(Z, {
        //         title: "Editar Zona" + Z.descripcion
        //     }).then(r => {
        //         if (r == "DELETE") return Ctrl.ZonasCRUD.delete(Z);
        //         Ctrl.ZonasCRUD.update(r).then(() => {
        //             Rs.showToast("Zona actualizada");
        //         });
        //     });
        // };

        Ctrl.eliminarZona = Z => {
            Rs.confirmDelete({
                Title: "¿Eliminar Zona #" + Z.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.ZonasCRUD.delete(Z);
            });
        };

        Ctrl.abrirOrganigrama = Z => {
            // console.log(O);
            $mdDialog.show({
                templateUrl: "Frag/GestionZona.OrganigramaDiag",
                controller: "ZonaDiagCtrl",
                locals: { Zona: Z },
                fullscreen: false
            });
        };
    }
]);

angular.module('BasicDialogCtrl', [])
.controller(   'BasicDialogCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;
		Ctrl.periodDateLocale = {
			formatDate: (date) => {
				if(typeof date == 'undefined' || date === null || isNaN(date.getTime()) ){ return null; }else{
					return moment(date).format('YMM');
				}
			}
		};

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.SendData = function(){
			$mdDialog.hide(Ctrl.Config);
		}

		Ctrl.selectItem = (Field, item) => {
			if(!Field.opts.itemVal){
				Field.Value = item;
			}else{
				Field.Value = item[Field.opts.itemVal];
			}
			
		};

		Ctrl.Delete = function(ev) {
			if(Config.HasDelete){
				Config.HasDeleteConf = true;

				Ctrl.SendData();
			}
		}
	}

]);
angular.module('BottomSheetCtrl', [])
.controller('BottomSheetCtrl', ['$scope', '$rootScope', '$mdBottomSheet', 'Config', 
	function($scope, $rootScope, $mdBottomSheet, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.Cancel = function(){ $mdBottomSheet.cancel(); }

		Ctrl.Config = angular.copy(Config);

		Ctrl.Send = function(Item){
			$mdBottomSheet.hide(Item);
		}
	}
]);
angular.module('ConfirmCtrl', [])
.controller(   'ConfirmCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}

		Ctrl.Send = function(val){
			$mdDialog.hide(val);
		}
		
	}

]);
angular.module('ConfirmDeleteCtrl', [])
.controller(   'ConfirmDeleteCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.hide(false);
		}

		Ctrl.Delete = function(){
			$mdDialog.hide(true);
		}
		
	}

]);
angular.module('CRUDDialogCtrl', [])
.controller('CRUDDialogCtrl', ['$rootScope', '$scope', '$mdDialog', 'ops', 'config', 'columns', 'Obj', 'rows', 
	function($rootScope, $scope, $mdDialog, ops, config, columns, Obj, rows) {

		console.info('CRUDDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.config = {};
		Ctrl.columns = columns;
		Ctrl.Obj = {};
		//Ctrl.Obj = angular.copy(Obj);

		//Saber si es nuevo
		Ctrl.new = !(ops.primary_key in Obj);
		Ctrl.config.confirmText = Ctrl.new ? 'Crear' : 'Guardar';
		Ctrl.config.title = Ctrl.new ? ('Nuevo '+ops.name) : ('Editando '+ops.name);
		Ctrl.config.delete_title = '¿Borrar '+ops.name+'?';

		angular.forEach(columns, function(F){
			if(F.Default !== null){
				var DefValue = angular.copy(F.Default);only
				Ctrl.Obj[F.Field] = DefValue;
			};

			F.show = true;
			if(config.only.length > 0){
				F.show = Rs.inArray(F.Field, config.only);
			};
			if(config.except.length > 0){
				F.show = !Rs.inArray(F.Field, config.except);
				F.show = !Rs.inArray(F.Field, config.except); 
			};
		});

		angular.extend(Ctrl.Obj, Obj);
		angular.extend(Ctrl.config, config);

		Ctrl.cancel = function(){ $mdDialog.hide(false); };

		Ctrl.sendData = function(){
			//Verificar los Uniques
			var Errors = 0;
			angular.forEach(columns, function(C){
				if(C.Unique){
					//console.log(ops.primary_key, Ctrl.Obj[ops.primary_key]);
					var except = Ctrl.new ? false : [ ops.primary_key, Ctrl.Obj[ops.primary_key] ];
					var Found = Rs.found(Ctrl.Obj[C.Field], rows, C.Field, undefined, except );
					if(Found) Errors++;
				};
			});

			if(Errors > 0) return false;

			$mdDialog.hide(Ctrl.Obj);
		};


		Ctrl.delete = function(ev){
			var config = {
				Title: Ctrl.config.delete_title,
			};

			Rs.confirmDelete(config).then(function(del){
				if(del){
					$mdDialog.hide('DELETE');
				};
			});
		};


		
		//Campos
		//Ctrl.fields = angular.copy

	}
]);

angular.module('ExternalLinkCtrl', [])
.controller(   'ExternalLinkCtrl', ['$scope', 'Link', '$mdDialog', '$sce',  
	function ($scope, Link, $mdDialog, $sce) {

		var Ctrl = $scope;

		Ctrl.Link = $sce.trustAsResourceUrl(Link);

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}
		
	}

]);
angular.module('FileDialogCtrl', [])
.controller('FileDialogCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$mdToast', 'FileSel', 
	function($scope, $rootScope, $http, $mdDialog, $mdToast, FileSel) {

		console.info('FileDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.FileSel = FileSel;
		Ctrl.inArray = Rs.inArray;

		//Dialog
		Ctrl.Cancel = function(){
			$mdDialog.hide();
		};

	}
]);
angular.module('IconSelectDiagCtrl', [])
.controller(   'IconSelectDiagCtrl', ['$scope',  '$mdDialog', '$http', '$filter',
	function ($scope, $mdDialog, $http, $filter) {

		var Ctrl = $scope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filter = ''; Ctrl.CatSel = null;

		$http.get('/api/Main/iconos').then((r) => {
			Ctrl.Categorias = r.data.Categorias;
			Ctrl.IconosRaw	= r.data.Iconos;
		});

		Ctrl.Iconos = [];

		Ctrl.filterCat = (C) => { Ctrl.CatSel = C; Ctrl.filterIconos(); }

		Ctrl.filterIconos = () => {
			console.log(Ctrl.CatSel, Ctrl.filter);
			if(Ctrl.CatSel == null && Ctrl.filter == ''){ Ctrl.Iconos = []; }
			else if(Ctrl.filter !== ''){   Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, Ctrl.filter) }
			else if(Ctrl.CatSel !== null){ Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, { Categoria: Ctrl.CatSel }) };
		};

		Ctrl.selectIcon = (I) => {
			$mdDialog.hide(I.IconoFull);
		};
		
	}

]);
angular.module('ImageEditor_DialogCtrl', [])
.controller(   'ImageEditor_DialogCtrl', ['$scope', '$rootScope', '$mdDialog', '$mdToast', '$timeout', '$http', 'Upload', 'Config', 
	function ($scope, $rootScope, $mdDialog, $mdToast, $timeout, $http, Upload, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;

		console.info('-> Image Editor');

		Ctrl.Config = {
			Theme : 'Snow_White',		//El tema
			Title: 'Cambiar Imágen',	//El Titulo
			CanvasWidth:  350,			//Ancho del canvas
			CanvasHeight: 350,			//Alto del canvas
			CropWidth:  100,			//Ancho del recorte que se subirá
			CropHeight: 100,			//Alto del recorte que se subirá
			MinWidth:  50,				//Ancho mínimo del selector
			MinHeight: 50,				//Ancho mínimo del selector
			KeepAspect: true,			//Mantener aspecto
			Preview: false,				//Mostrar vista previa
			PreviewClass: '',			//md-img-round
			RemoveOpt: false,			//Si es texto muestra la opcion de borrar
			Daten: null					//La data a enviar al servidor
		};

		Ctrl.RotationCanvas = document.createElement("canvas");

		Ctrl.cropper = {};
		Ctrl.cropper.sourceImage = null;
		Ctrl.cropper.croppedImage = null;
		Ctrl.bounds = {};

		Ctrl.Progress = null;

		angular.extend(Ctrl.Config, Config);

		Ctrl.CancelText = Ctrl.Config.RemoveOpt ? Ctrl.Config.RemoveOpt : 'Cancelar';
		
		Ctrl.CancelBtn = function(){
			if(!Ctrl.Config.RemoveOpt){
				Ctrl.Cancel();
			}else{
				$http.post('/api/Upload/remove', { Path: Ctrl.Config.Daten.Path }).then(function(){
					$mdDialog.hide({Removed: true});
				});
			}
		}

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.Rotar = function(dir){
			var canvas = Ctrl.RotationCanvas;
			var ctx = canvas.getContext("2d");

			var image = new Image();
			image.src = Ctrl.cropper.sourceImage;
			image.onload = function() {
				canvas.width = image.height;
				canvas.height = image.width;
				ctx.rotate(dir * Math.PI / 180);
				ctx.translate(0, -canvas.width);
				ctx.drawImage(image, 0, 0); 
				Ctrl.cropper.sourceImage = canvas.toDataURL();
			};
		}

		Ctrl.$watch('Ctrl.cropper.sourceImage', function(nv, ov){
			if(nv){
				console.log('Imagen Cargada');
			}
		});

		Ctrl.SendImage = function(){

			var Daten = {
				file: Upload.dataUrltoBlob(Ctrl.cropper.croppedImage),
				Quality: 90
			};

			angular.extend(Daten, Config.Daten);

			Upload.upload({

				url: '/api/main/upload-img',
				data: Daten,

			}).then(function (res) {
				
				$timeout(function () {
					$mdDialog.hide(res.data);
				});

			}, function (response) {
				if (response.status > 0){
					
					var Msg = response.status + ': ' + response.data;
					var errTxt = '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>';

					$mdToast.show({
						template: errTxt,
						hideDelay: 5000
					});

				}
			}, function (evt) {
				Ctrl.Progress = parseInt(100.0 * evt.loaded / evt.total);
			});

		}

		//console.log(angular.element(document.querySelector('#Canvas')));
	}

]);
angular.module('ImportCtrl', [])
.controller('ImportCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$sce', 'Upload', 'Config',
	function($scope, $rootScope, $http, $mdDialog, $sce, Upload, Config) {

		console.info('ImportCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filterAccion = '';
		Ctrl.inArray = Rs.inArray;

		Ctrl.Config = {
			Titulo: 'Importar', TituloIcono: 'fa-upload', 
			Paso: 1,
			Pasos: [ '',
				'Subir Plantilla',
				'Verificar Datos',
				'Importando',
				'Finalizado'
			],
			PlantillaUrl: false,
			PlantillaMsg: 'Descarge la plantilla y diligenciela con sus datos luego puede cargarla en esta pantalla.',
			PlantillaMsg2: '',
			PlantillaDown: [ 'fa-download' ],
			UploadUrl: 'api/Archivos/upload',
			SyncUrl: '',
			UploadData: {},
			Campos: [],
			FilaInicial: 2,
			ImportAcciones: {
				Crear:      { cant: 0, icono: 'fa-plus', clase: 'bg-lightgreen' },
				Actualizar: { cant: 0, icono: 'fa-sync-alt', clase: 'bg-yellow' },
				Eliminar:   { cant: 0, icono: 'fa-trash', clase: 'bg-lightred' },
				Errores:    { cant: 0, icono: 'fa-exclamation-triangle', clase: 'bg-lightpurple' }
			},
			testUpload: false,
		};
		
		angular.extend(Ctrl.Config, Config);

		Ctrl.DownloadPlantilla = function(){
			$http.get(Ctrl.Config.PlantillaUrl, { responseType: 'arraybuffer' }).then(function(r) {
        		var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
		        var filename = Ctrl.Config.PlantillaUrl.split('/').pop();
		        saveAs(blob, filename);
        	});
		};


		Ctrl.UploadTemplate = function(file, invalidfile){
			if(file) {
	            Upload.upload({
					url: Ctrl.Config.UploadUrl,
					method: 'POST',
					file: file,
					data: {
						Data:   Ctrl.Config.UploadData,
						Campos: Ctrl.Config.Campos,
						FilaInicial: Ctrl.Config.FilaInicial
					}
				}).then(function(r){

					Ctrl.ImportData = r.data;
					Ctrl.VerifyData();
					/*if(r.status == 200){
						
					}else{
						Ctrl.Config.Paso = 6;
					};*/
				});
			};
		};

		Ctrl.testUpload = () => {
			$http.post(Ctrl.Config.UploadUrl, {
				Data:   Ctrl.Config.UploadData,
				Campos: Ctrl.Config.Campos,
				FilaInicial: Ctrl.Config.FilaInicial
			}).then(r => {
				Ctrl.ImportData = r.data;
				Ctrl.VerifyData();
			});
		}


		CountAcciones = () => {
			angular.forEach(Ctrl.Config.ImportAcciones, (A) => {
				A.cant = 0;
			});

			angular.forEach(Ctrl.ImportData, (Row) => {
				Ctrl.Config.ImportAcciones[Row._import_action].cant ++;
			});

			//Ctrl.doSync(); //FIX
		};

		Ctrl.VerifyData = function(){
			

			if(Ctrl.ImportData.length > 0){
				Ctrl.Config.Paso = 2;
				CountAcciones();
			}else{
				Ctrl.finishSync('No se encontraron cambios', 'Alert');
			};

			

			/*$http.post(Ctrl.Config.VerifyUrl, { Config: Ctrl.Config }).then(function(r){
				var Msgs = r.data;
				console.log(Msgs);
				if(Msgs.length == 0){
					Ctrl.Config.Paso = 3;
				}else{ //Hubo errores en la verificacion
					Ctrl.Config.Paso = 5;
					Ctrl.Errores = Msgs;
				}
			});*/
		}

		Ctrl.viewAcciones = (kA) => {
			if(Ctrl.filterAccion == kA) return Ctrl.filterAccion = '';
			Ctrl.filterAccion = kA;
		}

		//Ctrl.VerifyData();

		Ctrl.doSync = () => {
			Ctrl.Config.Paso = 3;
			$http.post(Ctrl.Config.SyncUrl, { ImportData: Ctrl.ImportData, Campos: Ctrl.Config.Campos }).then((r) => {
				Ctrl.finishSync('Sincronización terminada exitosamente', 'Ok');
			});
		}

		Ctrl.finishSync = (Msg, Status) => {
			Ctrl.Config.Paso = 4;
			Ctrl.FinishMsg = Msg;
			Ctrl.FinishStatus = Status;
		}

		Ctrl.finishDiag = () => {
			$mdDialog.hide();
		}

		Ctrl.DownloadErrors = function(){
			var Headers = [ 'Fila', 'Error' ];
			var e = {
        		filename: 'Errores_Importacion',
        		ext: 'xls',
        		sheets: [
        			{
						name: 'Errores',
						headers: Headers,
						rows: Ctrl.Errores,
					}
        		]
			};
			Rs.DownloadExcel(e);
		};

		//console.log(Ctrl.Config.PlantillaUrl);

		if(Ctrl.Config.testUpload) Ctrl.testUpload(); //FIX
		//Ctrl.finishSync('Sincronización terminada exitosamente');

	}
]);
angular.module('ListSelectorCtrl', [])
.controller('ListSelectorCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', 'List', 'Config',
	function($scope, $rootScope, $http, $mdDialog, List, Config) {

		//console.info('ListSelectorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Config = Config;
		Ctrl.Searching = false;

		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

		Ctrl.getData = function(){
			Ctrl.Searching = true;
			//Traer los datos del servidor
			$http({
				method: Ctrl.Config.remoteMethod,
				url: Ctrl.Config.remoteUrl,
				data: Ctrl.Config.remoteData,
			}).then(function(r){
				Ctrl.Searching = false;
				Ctrl.List = r.data;
			}, function(){
				Ctrl.Searching = false;
			});
		};

		//Si pasan la lista usarla
		if(List !== null){
			Ctrl.List = List;
		}else if(Ctrl.Config.remoteUrl){
			Ctrl.getData();
		};

		Ctrl.changeSearch = function(){

			if(Ctrl.Config.remoteQuery){
				if(Ctrl.Searching) return false;
				Ctrl.Config.remoteData.filter = Ctrl.Search;
				Ctrl.getData();
			}else{
				Ctrl.SearchFilter = Ctrl.Search;
			}
		}

		Ctrl.Resp = function(Row){
			$mdDialog.hide(Row);
		}


	}
]);
angular.module('RelsManagerCtrl', [])
.controller('RelsManagerCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Config', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Config) {

		console.info('RelsManagerCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		
		Ctrl.Config = {
			Titulo: 'Gestionar Relaciones',
			Theme: 'Snow_White', 
		};
		
		angular.extend(Ctrl.Config, Config);

	}
]);
angular.module('OrganizacionDiagCtrl', [])
.controller('OrganizacionDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Organizacion',
	function($scope, $rootScope, $http, $injector, $mdDialog, Organizacion) {

		console.info('OrganizacionDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Organizacion = Organizacion;
	}
]);
angular.module('xxxUsuariosCtrl', [])
.controller('xxxUsuariosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('UsuariosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/usuario/usuarios',
			limit: 9999,
			add_append: 'refresh',
		});
		
		Ctrl.getUsuarios = () => {
			Ctrl.UsuariosCRUD.get().then(() => {
				//Ctrl.nuevoUsuario(); //FIX
			});
		};

		Ctrl.getUsuarios();

		Ctrl.nuevoUsuario = () => {
			Ctrl.UsuariosCRUD.dialog({}, {
				title: 'Agregar Usuario',
			}).then(r => {
				Ctrl.UsuariosCRUD.add(r).then(() => {
					Rs.showToast('Usuario creado');
				});
			});
		}

		Ctrl.editarUsuario = (U) => {
			Ctrl.UsuariosCRUD.dialog(U, {
				title: 'Editar el usuario' + U.nombres
			}).then(r => {
				if(r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
				Ctrl.UsuariosCRUD.update(r).then(() => {
					Rs.showToast('Usuario actualizado');
				});
			});
		}


	}
]);
angular.module('HomeCtrl', [])
    .controller('HomeCtrl', ['$scope', '$rootScope', '$http', '$state', '$mdDialog', '$location', 'appFunctions',
        function($scope, $rootScope, $http, $state, $mdDialog, $location, appFunctions) {

            //console.info('HomeCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Logout = () => {
                let confirm = $mdDialog.confirm()
                    .title('¿Desea salir del aplicativo?')
                    .ok('Cerrar Sesion')
                    .cancel('Regresar');

                $mdDialog.show(confirm).then(() => {
                    $state.go('Login');
                });
            }


            Ctrl.obtenerSecciones = () => {
                $http.post('api/main/obtener-secciones', {}).then(r => {
                    Rs.Secciones = r.data;
                });
            }

            Ctrl.obtenerSecciones();

            //Gestion del Estado
            Rs.cambioEstado = function() {
                Rs.Estado = $state.current;
                Rs.Estado.ruta = $location.path().split('/');

                //console.log(Rs.Estado);
            };

            Rs.navegarSubseccion = (Seccion, Subseccion) => {
                $state.go('Home.Seccion.Subseccion', { seccion: Seccion, subseccion: Subseccion });
            };

            Rs.$on("$stateChangeSuccess", Rs.cambioEstado);

            Rs.cambioEstado();
        }
    ]);
angular.module('LoginCtrl', [])
.controller('LoginCtrl', ['$rootScope', '$http', '$state', '$localStorage', 
	function($rootScope, $http, $state, $localStorage){

		console.log('LoginCtrl');

		let Rs = $rootScope;

		delete $localStorage.token;

		Rs.Usuario = {
			Correo: 'info@mbrain.co',
			Password: 'kasdfjkl9r90jr'
		};

		Rs.enviarLogin = (ev) => {
			ev.preventDefault();
			
			$http.post('/api/usuario/login', { Credenciales: Rs.Usuario }).then((r) => {
				let token = r.data;
				$localStorage.token = token;
				$state.go('Home');
			});
		}

	}
]);
angular.module('MainCtrl', [])
.controller('MainCtrl', ['$rootScope', 
	function($rootScope){

		console.log('MainCtrl');

		let Rs = $rootScope;

		Rs.Saludo = 'Hola Mundo 78768';
		Rs.saludar=()=>{
			alert('Hola')
			console.log(alert);
		}
	}
]);
angular.module('FincaDiagCtrl', [])
.controller('FincaDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Finca', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Finca) {

		console.info('FincaDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Finca = Finca;
		// Ctrl.Tarea = Tarea;
		
	}
]);
angular.module('TareaDiagCtrl', [])
.controller('TareaDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Tarea', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Tarea) {

		console.info('TareaDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Tarea = Tarea;
		
		
	}
]);
angular.module('ArticuloDiagCtrl', [])
    .controller('ArticuloDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            console.info('ArticuloDiagCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Salir = $mdDialog.cancel;
            Ctrl.Articulo = Articulo;

        }
    ]);
angular.module('MiTecnicoAmigoCtrl', [])
    .controller('MiTecnicoAmigoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$state',
        function($scope, $rootScope, $http, $injector, $mdDialog, $state) {

            //console.info('MiTecnicoAmigoCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Por defecto carga la subseccion Inicio (MiTecnicoAmigo) :: Luigi
            Ctrl.Subseccion = 'Inicio';
            Ctrl.PalabrasClave = [];
            Ctrl.Cancel = $mdDialog.cancel;
             //INICIO DEV ANGELICA
             Ctrl.SelectedKey = false;
             Ctrl.key = "";
             Ctrl.keys= [];
             Ctrl.ArticulosBuscados = [];
 

            $http.post('api/articulos/obtener', {}).then(
                r => {
                    Ctrl.Articulos = r.data;
                    //Inicio Dev Angélica -- seleccionar las palabras claves
                    let keys = [];

                    Ctrl.Articulos.forEach(function(articulo) {
                        if (articulo.palabras_clave) {
                            keys.push(...articulo.palabras_clave.split(","));
                        }
                    });
                    keys = keys.sort().filter(function(item, pos, ary) {
                        return !pos || item != ary[pos - 1];
                    });

                    Ctrl.PalabrasClave = keys;
                });
            //Fin Dev Angélica 

            Ctrl.abrirArticulo = (A) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.ArticuloDiag',
                    controller: 'ArticuloDiagCtrl',
                    locals: { Articulo: A },
                    fullscreen: false,
                });
            };

            //Casos :: Inicia Luigi
            // Obtener toda la información y metodos de CASOS
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
                query_with: ['novedades', 'solicitante'],
                order_by: []
            });

            Ctrl.getCasos = () => {

                //Inicio Dev Angélica
                //Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia' [ver archivo Caso.php]
                Ctrl.CasosCRUD.setScope('tipo');

                Ctrl.CasosCRUD.get();
                /*let filter = Ctrl.CasosCRUD.rows.filter(caso=>caso.tipo==='tipo');
                  console.log('Ctrl.CasosCRUD.rows', Ctrl.CasosCRUD.rows);
                  console.log('filtro', filter);*/
                //Fin Dev Angélica
            }
            Ctrl.getCasos();
            //Casos :: Finaliza Luigi

            Ctrl.crearCaso = () => {
                var OpcionesTipo = [
                    ['Tengo una Duda General', 'Consulta General'],
                    ['Necesito Ayuda Técnica', 'Apoyo Técnico'],
                    ['Quiero Contar Una Experiencia', 'Contar Experiencia']
                ];

                Rs.BasicDialog({
                    Flex: 30,
                    Title: 'Crear Nueva Solicitud',
                    Fields: [
                        { Nombre: '¿En Qué Puedo Ayudarte?', Value: 'Tengo una Duda General', Type: 'simplelist', List: OpcionesTipo.map(a => a[0]), Required: true },
                        { Nombre: 'Describe el Caso', Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
                    ],
                    Confirm: { Text: 'Crear Solicitud' },
                }).then(r => {
                    if (!r) return;

                    var NuevoCaso = {
                        titulo: r.Fields[1].Value,
                        solicitante_id: Rs.Usuario.id,
                        tipo: OpcionesTipo.find(a => a[0] == r.Fields[0].Value)[1],
                        asignados: '[]'
                    };
                    Ctrl.CasosCRUD.add(NuevoCaso);
                    Ctrl.navegarA('Solicitudes');
                });
            };

            //INICIO DEV ANGÉLICA
            //yo como usuario puedo ver todas las solicitudes o solo las mias?
            //Si entro como admin debo ver las solicitudes de todos, con un filtro--> las que si y no tienen respuesta
            //Si el usuario navega por web que no vea el boton de SMS
            Ctrl.crearCasoTelefonico = (medio) => {
                var NuevoCaso = {
                    titulo: 'Boton Contacto',
                    solicitante_id: Rs.Usuario.id,
                    tipo: medio,
                    asignados: '[]'
                };
                alert('Inicia llamado al WS')
                Ctrl.CasosCRUD.add(NuevoCaso);
            };
            //FIN DEV ANGELICA

            // Novedad Caso :: Inicia Luigi
            // Abrir el modal para la revisión y creación de novedades por Caso
            Ctrl.novedadesCaso = (C) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.MiTecnicoAmigo_SolicitudesDetalleDiag',
                    controller: 'SolicitudesDetalleCtrl',
                    locals: {
                        Caso: C
                    },
                });
            };
            // Novedad Caso :: Finaliza Luigi

            //INICIO DEV ANGÉLICA ---> Filtro de búsqueda 
            Ctrl.searchChange = function() {
                let filtro = Ctrl.filtroArticulos;
                if (!filtro) return Ctrl.Buscando = false;
                filtro = filtro.toLowerCase().replace(" de ", " ")
                    .replace(" en ", " ")
                    .replace(" para ", " ")
                    .replace(" por ", " ")
                    .replace(" la ", " ")
                    .replace(" y ", " ");

                if (filtro == "") return Ctrl.Buscando = false;

                let keys = filtro.split(" ");
                Ctrl.keys = [];//nuevo
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    keys.forEach(function(key) {
                        if (articulo.titulo.toLowerCase().indexOf(key) > 0) {
                            articulo.contador++;
                        }
                    });
                    // Recorre cada una de las palabras digitadas en el filtro
                keys.forEach(function (palabra){
                    // Separa cada una de las pabras clave del artuculo
                    let keys = articulo.palabras_clave.split(",");
                
                    // Buscamos si la palabra del filtro esta en la lista de palabras clave
                    if (keys.includes(palabra)) {
                        articulo.contador++; 
                        Ctrl.SelectedKey = true;
                        Ctrl.keys.push(palabra);
                        console.log(articulo.palabras_clave, palabra);
                    }
                });

                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                });

                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };
            //FIN DEV ANGÉLICA

            //INICIO DEV ANGÉLICA -- Search key words
            Ctrl.searchKeyWords = (key) => {
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.SelectedKey = true;
                Ctrl.key = key;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    if (articulo.palabras_clave.indexOf(key) >= 0) {
                        articulo.contador++;
                    }

                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                })

                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };

            Ctrl.cleanFilter = () => {
                Ctrl.SelectedKey = false;
                Ctrl.key = "";
                Ctrl.Buscando = false;
                Ctrl.ArticulosBuscados = [];
                Ctrl.keys = [];
            }

            //FIN DEV ANGÉLICA

            // Navegar :: Inicia Luigi
            // Metodo para navegar en opciones de Mi Tecnico Amigo
            Ctrl.navegarA = (s) => {
                $state.go('Home.Seccion.Subseccion', { subseccion: s });
            };
            // Navegar :: Finaliza Luigi
        }
    ]);

// Inicio del codigo de Luigi
angular.module('SolicitudesDetalleCtrl', [])
    .controller('SolicitudesDetalleCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {

            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);
            //console.log(Ctrl.Caso);

            // Activamos el evento Cancel, para cerrar modales
            Ctrl.Cancel = $mdDialog.cancel;

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            // Obtenemos los datos de casos, en CasosCRUD
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                    //console.log(Imagen);
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };
        }
    ]);
// Fin del codigo de Luigi
// Reacts upon enter key press.
angular.module('enterStroke', []).directive('enterStroke',
  function () {
    return function (scope, element, attrs) {
      element.bind('keydown keypress', function (event) {
        if(event.which === 13) {
          scope.$apply(function () {
            scope.$eval(attrs.enterStroke);
          });
          event.preventDefault();
        }
      });
    };
  }
);
angular.module('extSubmit', []).directive("extSubmit", ['$timeout',function($timeout){
    return {
        link: function($scope, $el, $attr) {
            $scope.$on('makeSubmit', function(event, data){
              if(data.formName === $attr.name) {
                $timeout(function() {
                  $el.triggerHandler('submit'); //<<< This is Important
                  //$el[0].dispatchEvent(new Event('submit')) //equivalent with native event
                }, 0, false);   
              }
            })
        }
    };
}]);
angular.module('fileread', [])
.directive("fileread", [function () {
    return {
        scope: {
            fileread: "="
        },
        link: function (scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    scope.$apply(function () {
                        scope.fileread = JSON.parse(loadEvent.target.result);
                    });
                }
                reader.readAsDataURL(changeEvent.target.files[0]);
            });
        }
    }
}]);
angular.module('focusOn', [])
.directive('focusOn', function() {
   return function(scope, elem, attr) {
      scope.$on(attr.focusOn, function(e) {
      		setTimeout(function(){ 
      			elem[0].focus();
          		console.log('Focused', elem);
      		}, 3000);
      });
   };
});
angular.module('horizontalScroll', []).
directive('horizontalScroll', function () {

    return {
        link:function (scope, element, attrs) {
            var base = 0

            element.bind("DOMMouseScroll mousewheel onmousewheel", function(event) {

                // cross-browser wheel delta
                var event = window.event || event; // old IE support
                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));


                scope.$apply(function(){
                    base += (30*delta);
                    //console.log(element, base);
                    element.children().css({'transform':'translateX('+base+'px)'});
                    //element.scrollLeft(base);
                });

                // for IE
                event.returnValue = false;
                // for Chrome and Firefox
                if(event.preventDefault) { event.preventDefault(); }


            });
        }
    };
});
angular.module('hoverClass', [])
.directive('hoverClass', [function () {
    return {
        restrict: 'A',
        scope: {
            hoverClass: '@'
        },
        link: function (scope, element) {
            element.on('mouseenter', function() {
                element.addClass(scope.hoverClass);
            });
            element.on('mouseleave', function() {
                element.removeClass(scope.hoverClass);
            });
        }
    };
}]);
(function () {
    'use strict';

    angular.module('ngJsonExportExcel', [])
        .directive('ngJsonExportExcel', function () {
            return {
                restrict: 'AE',
                scope: {
                    data : '=',
                    filename: '=?',
                    reportFields: '=',
                    separator: '@'
                },
                link: function (scope, element) {
                    scope.filename = !!scope.filename ? scope.filename : 'export-excel';
                    scope.extension = !!scope.extension ? scope.extension : '.csv';

                    var fields = [];
                    var header = [];
                    var separator = scope.separator || ';';

                    angular.forEach(scope.reportFields, function(field, key) {
                        if(!field || !key) {
                            throw new Error('error json report fields');
                        }

                        fields.push(key);
                        header.push(field);
                    });

                    element.bind('click', function() {
                        var bodyData = _bodyData();
                        var strData = _convertToExcel(bodyData);

                        var blob = new Blob([strData], { 
                            type: "text/plain;charset=utf-8"
                            //type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });

                        return saveAs(blob, [scope.filename + scope.extension ]);
                    });

                    function _bodyData() {
                        var data = scope.data;
                        var body = "";
                        angular.forEach(data, function(dataItem) {
                            var rowItems = [];

                            angular.forEach(fields, function(field) {
                                if(field.indexOf('.')) {
                                    field = field.split(".");
                                    var curItem = dataItem;

                                    // deep access to obect property
                                    angular.forEach(field, function(prop){
                                        if (curItem !== null && curItem !== undefined) {
                                            curItem = curItem[prop];
                                        }
                                    });

                                    data = curItem;
                                }
                                else {
                                    data = dataItem[field];
                                }

                                var fieldValue = data !== null ? data : ' ';

                                if (fieldValue !== undefined && angular.isObject(fieldValue)) {
                                    fieldValue = _objectToString(fieldValue);
                                }

                                rowItems.push(fieldValue);
                            });

                            body += rowItems.join(separator) + '\n';
                        });

                        return body;
                    }

                    function _convertToExcel(body) {
                        return header.join(separator) + '\n' + body;
                    }

                    function _objectToString(object) {
                        var output = '';
                        angular.forEach(object, function(value, key) {
                            output += key + ':' + value + ' ';
                        });

                        return '"' + output + '"';
                    }
                }
            };
        });
})();
/*! ng-csv 10-10-2015 */
!function(a){angular.module("ngCsv.config",[]).value("ngCsv.config",{debug:!0}).config(["$compileProvider",function(a){angular.isDefined(a.urlSanitizationWhitelist)?a.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/):a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)}]),angular.module("ngCsv.directives",["ngCsv.services"]),angular.module("ngCsv.services",[]),angular.module("ngCsv",["ngCsv.config","ngCsv.services","ngCsv.directives","ngSanitize"]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngCsv"),angular.module("ngCsv.services").service("CSV",["$q",function(a){var b="\r\n",c="﻿",d={"\\t":"	","\\b":"\b","\\v":"","\\f":"\f","\\r":"\r"};this.stringifyField=function(a,b){return"locale"===b.decimalSep&&this.isFloat(a)?a.toLocaleString():"."!==b.decimalSep&&this.isFloat(a)?a.toString().replace(".",b.decimalSep):"string"==typeof a?(a=a.replace(/"/g,'""'),(b.quoteStrings||a.indexOf(",")>-1||a.indexOf("\n")>-1||a.indexOf("\r")>-1)&&(a=b.txtDelim+a+b.txtDelim),a):"boolean"==typeof a?a?"TRUE":"FALSE":a},this.isFloat=function(a){return+a===a&&(!isFinite(a)||Boolean(a%1))},this.stringify=function(d,e){var f=a.defer(),g=this,h="",i="",j=a.when(d).then(function(a){if(angular.isDefined(e.header)&&e.header){var d,j;d=[],angular.forEach(e.header,function(a){this.push(g.stringifyField(a,e))},d),j=d.join(e.fieldSep?e.fieldSep:","),i+=j+b}var k=[];if(angular.isArray(a)?k=a:angular.isFunction(a)&&(k=a()),angular.isDefined(e.label)&&e.label&&"boolean"==typeof e.label){var l,m;l=[],angular.forEach(k[0],function(a,b){this.push(g.stringifyField(b,e))},l),m=l.join(e.fieldSep?e.fieldSep:","),i+=m+b}angular.forEach(k,function(a,c){var d,f,h=angular.copy(k[c]);f=[];var j=e.columnOrder?e.columnOrder:h;angular.forEach(j,function(a){var b=e.columnOrder?h[a]:a;this.push(g.stringifyField(b,e))},f),d=f.join(e.fieldSep?e.fieldSep:","),i+=c<k.length?d+b:d}),e.addByteOrderMarker&&(h+=c),h+=i,f.resolve(h)});return"function"==typeof j["catch"]&&j["catch"](function(a){f.reject(a)}),f.promise},this.isSpecialChar=function(a){return void 0!==d[a]},this.getSpecialChar=function(a){return d[a]}}]),angular.module("ngCsv.directives").directive("ngCsv",["$parse","$q","CSV","$document","$timeout",function(b,c,d,e,f){return{restrict:"AC",scope:{data:"&ngCsv",filename:"@filename",header:"&csvHeader",columnOrder:"&csvColumnOrder",txtDelim:"@textDelimiter",decimalSep:"@decimalSeparator",quoteStrings:"@quoteStrings",fieldSep:"@fieldSeparator",lazyLoad:"@lazyLoad",addByteOrderMarker:"@addBom",ngClick:"&",charset:"@charset",label:"&csvLabel"},controller:["$scope","$element","$attrs","$transclude",function(a,b,e){function f(){var b={txtDelim:a.txtDelim?a.txtDelim:'"',decimalSep:a.decimalSep?a.decimalSep:".",quoteStrings:a.quoteStrings,addByteOrderMarker:a.addByteOrderMarker};return angular.isDefined(e.csvHeader)&&(b.header=a.$eval(a.header)),angular.isDefined(e.csvColumnOrder)&&(b.columnOrder=a.$eval(a.columnOrder)),angular.isDefined(e.csvLabel)&&(b.label=a.$eval(a.label)),b.fieldSep=a.fieldSep?a.fieldSep:",",b.fieldSep=d.isSpecialChar(b.fieldSep)?d.getSpecialChar(b.fieldSep):b.fieldSep,b}a.csv="",angular.isDefined(a.lazyLoad)&&"true"==a.lazyLoad||angular.isArray(a.data)&&a.$watch("data",function(){a.buildCSV()},!0),a.getFilename=function(){return a.filename||"download.csv"},a.buildCSV=function(){var g=c.defer();return b.addClass(e.ngCsvLoadingClass||"ng-csv-loading"),d.stringify(a.data(),f()).then(function(c){a.csv=c,b.removeClass(e.ngCsvLoadingClass||"ng-csv-loading"),g.resolve(c)}),a.$apply(),g.promise}}],link:function(b,c){function d(){var c=b.charset||"utf-8",d=new Blob([b.csv],{type:"text/csv;charset="+c+";"});if(a.navigator.msSaveOrOpenBlob)navigator.msSaveBlob(d,b.getFilename());else{var g=angular.element('<div data-tap-disabled="true"><a></a></div>'),h=angular.element(g.children()[0]);h.attr("href",a.URL.createObjectURL(d)),h.attr("download",b.getFilename()),h.attr("target","_blank"),e.find("body").append(g),f(function(){h[0].click(),h.remove()},null)}}c.bind("click",function(){b.buildCSV().then(function(){d()}),b.$apply()})}}}])}(window,document);
angular.module('ngRightClick', [])
.directive('ngRightClick', ['$parse', function($parse){
	return function(scope, element, attrs) {
        var fn = $parse(attrs.ngRightClick);
        element.bind('contextmenu', function(event) {
            scope.$apply(function() {
                event.preventDefault();
                fn(scope, {$event:event});
            });
        });
    };
}]);
// Reacts upon enter key press.
angular.module('printThis', []).directive('printThis',
  function () {
    return function (scope, element, attrs) {
      element.bind('click', function (event) {
          event.preventDefault();
          //console.log(_config);

          //return false;

          $(attrs.printThis).printThis({
          		debug: false,
              importStyle: true,
          });
      });
    };
  }
);